
# ------------------------------ VARIABLE SCOPE ------------------------------ #
1. the scope of a variable determines where it can be accessed within the code.
2. Global Scope, Local (Function) Scope, Block-Level Scope.

# ---------------------------------- ELSE IF --------------------------------- #

# ----------------------------- SWITCH STATEMENT ----------------------------- #

# ----------------------------- TERNARY OPERATOR ----------------------------- #






# -------------------------- ACTIVATING STRICT MODE -------------------------- #
1. Strict mode in JavaScript is a way to opt into a restricted variant of JavaScript, thereby catching common coding errors and preventing potentially unsafe actions.
2.  It was introduced in ECMAScript 5 (ES5) and helps developers write more secure and robust code by changing the semantics of JavaScript execution.
3. Using strict mode can help catch common mistakes and improve the overall quality of your code by enforcing stricter parsing and error handling.
4. It is generally a good practice to use strict mode in your JavaScript projects to avoid subtle bugs and enhance the performance of your code.
5. Strict mode can be enabled in two ways:
    -- Global Strict Mode
    -- Function-level Strict Mode

# --------------------------------- FUNCTIONS -------------------------------- #
1. there are 3 types of functions in javascript.
2. (Named Functions/function declarations), (Anonymous Functions/function expressions),  (Arrow Functions).
3. function is a set of instructions that can be used repeatedly in a program.
4. In JavaScript, functions are objects that can be declared, assigned, and passed as parameters to other functions.
5. function declaration - can be used before its declared.
6. function expression - essentially a function value stored in a variable.
7. arrow function - great for one line function, this keyword won't work in arrow function.

# ---------------------- FUNCTION CALLING OTHER FUNCTION --------------------- #
1. we can call a function inside another function in javascript.
2. inside function1 we need to to call the function2().

# ----------------------------------- ARRAY ---------------------------------- #
1. An array is a special variable, which can hold more than one value.

    const array_name = [item1, item2, ...];
    const array_name = new Array(item1, item2, ...);

2. we can use different datatypes inside a array.
3. we can use a array as a value inside a array.

# ---------------------------- ARRAY METHODS --------------------------- #
1. Mutator Methods [These methods modify the array]

    push() - Adds one or more elements to the end of an array and returns the new length of the array.
    pop() - Removes the last element from an array and returns that element.
    shift() - Removes the first element from an array and returns that element.
    unshift() - Adds one or more elements to the front of an array and returns the new length of the array.
    splice() - Changes the contents of an array by removing or replacing existing elements and/or adding new elements.
    sort() - Sorts the elements of an array in place and returns the array.
    reverse() - Reverses the order of the elements in an array in place.
    copyWithin() - Shallow copies part of an array to another location in the same array and returns it, without modifying its     length.
    fill() - Fills all the elements of an array from a start index to an end index with a static value.

2. Accessor Methods [These methods do not modify the array but return some representation of the array]

    concat() - Merges two or more arrays and returns a new array.
    includes() - Determines whether an array includes a certain value among its entries, returning true or false.
    indexOf() - Returns the first index at which a given element can be found, or -1 if it is not present.
    lastIndexOf() - Returns the last index at which a given element can be found, or -1 if it is not present.
    join() - Joins all elements of an array into a string and returns this string.
    slice() - Returns a shallow copy of a portion of an array into a new array object.
    toString() - Returns a string representing the array and its elements.
    toLocaleString() - Returns a localized string representing the array and its elements.

3. Iteration Methods [These methods are used to iterate over arrays and perform some operation on each element]

    forEach() - Executes a provided function once for each array element.
    map() - Creates a new array populated with the results of calling a provided function on every element in the calling array.
    filter() - Creates a new array with all elements that pass the test implemented by the provided function.
    reduce() - Executes a reducer function on each element of the array, resulting in a single output value.
    reduceRight() - Executes a reducer function on each element of the array (from right-to-left), resulting in a single output     value.
    every() - Tests whether all elements in the array pass the test implemented by the provided function.
    some() - Tests whether at least one element in the array passes the test implemented by the provided function.
    find() - Returns the value of the first element in the array that satisfies the provided testing function.
    findIndex() - Returns the index of the first element in the array that satisfies the provided testing function.
    flat() - Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
    flatMap() - First maps each element using a mapping function, then flattens the result into a new array.
    keys() - Returns a new Array Iterator object that contains the keys for each index in the array.
    values() - Returns a new Array Iterator object that contains the values for each index in the array.
    entries() - Returns a new Array Iterator object that contains key/value pairs for each index in the array.

4. Other Methods [These methods serve miscellaneous purposes]

    from() - Creates a new, shallow-copied Array instance from an array-like or iterable object.
    isArray() - Determines whether the passed value is an array.
    of() - Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.

# ---------------------------------- OBJECTS --------------------------------- #
1. object is a versatile way to store collection of data.
2. an obeject is a collection of properties.
3. each property defined by key-value pair.

    const obj = {
        key1: value1,
        key2: value2,
        // ...
    };

# -------------------------- DOT VS BRACKET NOTATION ------------------------- #
1. to access a property in an object we can use dot notation and bracket notation.

    console.log(object.key_name);
    console.log(object['key_name']);

2. when we use bracket notation, we can set dynamic key name using unary operator.

    const newValue = 'Name';
    console.log(object['first' + newValue]);
    console.log(object['last' + newValue]);

3. dot notation dont allow us to set dynamic key.
4. we can create a new property using both the notation.

# ------------------------------ OBJECT METHODS ------------------------------ #
1. when a function is used inside a object and it contains a function value then we can say it as method.

    const jonas = {
        calcAge: function (birthyear) {
            return 2037 - birthyear;
        },
    };
    console.log(jonas.calcAge(1991));
    console.log(jonas['calcAge'](1991));

2. so we can use both dot and bracket notation for accessing object.
3. but make sure sure you use the correct key name.
4. javascript allow us access values between properties using 'this' keyword.
5. 'this' point to the current object calling.

    const jonas = {
        birthyear: 1991,
        calcAge: function () {
            return 2037 - this.birthyear;
        },
    };
    console.log(jonas.calcAge());
    console.log(jonas['calcAge']());

6. we can create new property using dot notation.

    const jonas = {
        birthyear: 1991,
        calcAge: function () {
            this.age = 2037 - this.birthyear;
            return;
        },
    };
    console.log(jonas.calcAge());

7. the above code will will create a new property with key name 'age'.

# ---------------------------- ITERATION: FOR LOOP --------------------------- #

    for (initialization; condition; finalExpression) {
        // code to be executed
    };

1. iteration means to run a code repeatedly based on the condition.
2. for loop is way to iterate a block of code.
3. it will run until the codition reach false.
4. on the other hand we change the final expression on every iteration.

    for (let i = 0; i < 5; i++) {
        console.log(i);
    };
    // Output: 0, 1, 2, 3, 4

# ------------------ LOOPING ARRAYS, BREAKING AND CONTINUING ----------------- #
1. to loop a array use array.length to find the length of the array.

    const arr = [0,1,2,3,4,5];
    for (let i = 0; i < arr.length; i++) {
        console.log(arr[i]);
    };
    // Output: 0, 1, 2, 3, 4, 5

2. in the above code the array length is 6.
3. so loop will run from 0 to 5.
4. break statement will skip all remaining iteration.
5. continue statement will skip the current iteration and run the remaining iteration.
6. use break and continue in loop with coditions appiled to it.

    const arr = [0,1,2,3,4,5,6,7,8,9];
    for (let i = 0; i < arr.length; i++) {
        if(i==2){
            continue;
        };
        if(i==5){
            break;
        };
        console.log(arr[i]);
    };
    // Output: 0, 1, 3, 4

# ------------------- LOOPING BACKWARD AND LOOP INSIDE LOOP ------------------ #
1. to loop backward first find the length.
2. initialize with that length and decrement it.
3. finally make the condition.

    const arr = [0,1,2,3,4,5];
    for (let i = arr.length; i > 0; i--) {
        console.log(arr[i]);
    };
    // Output: 5, 4, 3, 2, 1, 0

4. we can use a loop inside another loop.
5. this concept is called nested loop.

    for (let i = 0; i < 2; i++) {
        for (let j = 0; i < 2; j++) {
            console.log([i,j]);
        };
    };
    // Output: [0,0][0,1][1,0][1,1]

# -------------------------------- WHILE LOOP -------------------------------- #
1. while loop checks the condition before executing the loop's body.
2. If the condition is true, the code inside the loop is executed.
3. This process repeats until the condition evaluates to false.

    while (condition) {
        // code to be executed
    }

4. the below program will explain while loop.

    let count = 0;

    while (count < 5) {
        console.log(count);
        count++;
    }
    // Output: 0, 1, 2, 3, 4

# -------------------------- THINK LIKE A DEVELOPER -------------------------- #
1. stay calm and get to the problem with a plan.
2. take a logical and rational approach.
3. 4-step framework to solve any problem.

# ---------------------- 4-STEP PROBLEM SOLVING APPROACH --------------------- #
1. make sure you 100% understand the problem.
2. ask the right questions to get a clear picture of the problem.
3. example - "we need a function that reverse whatever we pass into it"
4. "whatever" means what?
5. like array, string, numbers, etc.
6. "what should it do if we pass something else?"
7. "how the output should be look like - array, string, or anything else."
8. "how to recognize whether the argument is a number, a string, or an array?"
9. how to revese a number, a string, andd an array?
10. always use divide and conquer method to break a big problem into small sub-problems.
11. sub - problems -> check if arguments is a number, a srting, or an number -> implement reversing a number -> implement reversing a string -> implement reversing an array -> return reversed value.
12. do research till you find answers for your solutions.
13. write pseudo-code before the actual code.

# ------------------------ DEBUGGING WITH ONLINE TOOLS ----------------------- #
1. stackoverflow -> use it to find answers for any questions that come for us.
2. debugging -> use to check wether any error arise in our code.
3. mdn website -> use to check the function names and how it behaves in javascript.

# --------------------------- ERRORS IN JAVASCRIPT --------------------------- #
1. software bug -> defect or problem in a computer program.
2. it is the unexpected or unintended behaviour of a computer program is a software bug.
3. bugs are completely normal in software development.
4. become aware there a bug in our program.
5. identify - during development -> testing software -> user reports during production -> contexts: browsers, users, etc.
6. find - developer console [simple code], debugger [complex code].
7. fix - replace wrong solution with new correct solution.
8. prevent - searching for the same bug in similar code -> writing tests using testing software.

# ------------------ DEBUGGING WITH CONSOLE AND BREAKPOINTS ------------------ #
1. first step is to identify where and in which place the bug occurs.
2. besides console.log() we have console.warn() and console.error().
3. we need to manually log that warning and error to show thae user.
4. second step is to find what causes the bug.
3. like this forgotten errors (remember propmt function always returs a string).
4. console.table() will print like a table in console window.
5. third step is to fix the bug by finding solutions.
6. for some task use the breakpoints in order to find the current values of the variables.
7. in chrome browser goto inspect window and click sources, under that click our js file and create a breakpoint by just clicking on the line number.
8. when we reload, program will stop at each breakpoint and we can check the values at each breakpoints.
9. use play,pause,next button to control the flow of the file.

# ---------------------------- CODING CHALLENGE 1 ---------------------------- #
1. given an array of forecasted maximum temperatures, the thermometer displays a string with these temperatures.
2. Examples: [17,21,23] will print "...17*C in 1 days ... 21*C in 2 days ... 23*C in 3 days ..."
3. create a function 'printForecast' which takes in an array 'arr' and logs a string like the above to the console.
4. use the problem-solving framework: understand the problem and break it up into sub-problems!

TEST DATA 1: [17, 21, 23]
TEST DATA 2: [12, 5, -5, 0, 4]

finding solution using problem-solving framework: 
1. understand the problem.
    -array transformed to string, seperated by ...
    -what is the x days? answer: index + 1
2. break it up into sub-problems.
    -transform array into string
    -transform each element into string with *C 
    -string needs to contain day (index + 1)
    -add ... between elements and start and end of string.
    -log string in console to check the output value.

    const data1 = [17, 21, 23];
    const data2 = [12, 5, -5, 0, 4];
    
    const printForecast = function(arr){
        let str = '...';
        for(let i=0; i<arr.length; i++){
            str += `${arr[i]}*C in ${i+1} days ...`;
        }
        console.log(str);
    }
    printForecast(data1);
    printForecast(data2);

# ------------------------ DOM EVENTS FUNDAMENTALS ----------------------- #
1. to select a element in our html, we can use query selector to select elements using class/id selector.

    console.log(document.querySelector('.message'));

2. the above code will log the element that has the class name 'message'.

    console.log(document.querySelector('.message').textContent);

3. this above code will log the text content of the the selected element.

# ------------------------- DOM AND DOM MANIPULATION ------------------------- #
1. DOM is called document object model.
2. it is the structured representation of html documents.
3. dom allows javascript to access html elements and styles to manipulate them.
4. dom is like a tree structure, generated by browser on html load.
5. 'document' is a special object that is the entry point to the DOM.
6. example: document.querySelector()
7. remember DOM is not Javascript.
8. DOM methods and properties are the part of web APIs.
9. web APIs are implemented by our browser which we can intract with them using JavaScript.
10. other than dom methods we have numerous APIs like Timers, Fetch, etc.

# -------------------- SELECTING AND MANIPULATING ELEMENTS ------------------- #
1. using querySelector we can select and manipulate elements by using the below code.

    document.querySelector('.message').textContent = 'new text';

2. value property is used to set and get values of a element.

    console.log(document.querySelector('.guess').value);
    document.querySelector('.guess').value = 23;

3. the above first code is get value and second code is set value.

# --------------------------- HANDLING CLICK EVENTS -------------------------- #
1. event is something that happen in our page like mouse click, keyboard click, etc.
2. with event listner we can wait for a event to happen and react to that event.
3. select that element and then call addEventListner().
4. inside the addEventListner we need to specify the type of event to happen and a function[ this function will call every time if the event occurs ].

    document.querySelector('.check').addEventListner('click', function(){
        console.log(document.querySelector('.guess').value);
    });

5. remember, this eventListner will be called only when the event occurs.

# ------------------------ IMPLEMENTING THE GAME LOGIC ----------------------- #
1. the main logic of the game is to create a random number using Math funcction.

    const secretNumber = Math.trunc(Math.random() * 20) + 1;

2. here match.random returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1.
3. with that random number we multiply with 20 to get a random floating number between 0 to 19.
4. finally we remove the floating points using trunc function and then finally we add a 1 to it to tally the value.
5. at the end we get a random value between 1 to 20.

# --------------------------------- SECTION 9 -------------------------------- #
# --------------------------- DESTRUCTURING ARRAYS --------------------------- #
1. in the ES6 version array destructuring was introduced.
2. it simplifies the destructuring using a single line of code.

    const [x, y, z] = arr;

3. if you see this first, it is hard to understand what was going.
4. always use the const while destructuring.
5. we can also destruct array inside the object.

    const [firstElement, SecondElement] = restaurant.categories;

6. we can also skip the element using a blank space.

    const [firstElement, , ThirdElement] = restaurant.categories;

7. using this way we can destruct what we need and we can skip what we dont want.
8. we can also use this destructuring to swap the values of two variables.

    [main, secondary] = [secondary, main];

9. for example in a restaurant app we can use the below line of code to destruct the menu.

    const [starterMenu, mainMenu] = restaurant.order(2, 0);
    console.log(starterMenu, mainMenu);

10. by this way we can destruct and create a new variable.
11. another example for destructuring array,

    const nested = [2, 4, [5, 6]];
    const [i, , j] = nested;
    console.log(i, j);

12. the output will be i -> 2 and j -> [5, 6].
13. in the same example we can destruct further more.

    const [i, , [j, k]] = nested;
    console.log(i, j, k);

14. the output will be i -> 2 and j -> 5, k -> 6.
15. apply this example only if you know the array length and only for small array.
16. if we try to destruct something out of box then undefined is the output we get for the variable.

    const [p, q, r] = [8, 9];
    console.log(p, q, r);

17. the output will be p -> 8 and q -> 9, r -> undefined.
18. in that case we can set a default value for that if there is nothing to read.

    const [p = 1, q = 1, r = 1] = [8];
    console.log(p, q, r);

19. the output will be p -> 8 and q -> 1, r -> 1.
20. this method is used when we get data from API.


# --------------------------- DESTRUCTURING OBJECTS -------------------------- #
1. to destructure object we use curly braces.
2. before destructuring remaining that the variable name should be same as the object key name.
3. otherwise it wont destructure that object correctly.
4. order of element is not a problem in object destructuring. 

    const {name, openingHours, categories} = restaurant;

5. this topic is very usefull in API calls and to destruct that object.
6. this topic is very important in react development.
7. we can also rename the variable we destruct to our preferred variable name as below.

    const {name : restaurantName , openingHours : hours , categories : tags} = restaurant;

8. like array destructuring, we do have options to set default values in the object destructuring.

    const {menu = [], starterMenu: starters = []} = restaurant;

9. this will be very helpfull in situations when we try to acess undefined values.
10. 