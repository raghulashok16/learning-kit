cmd wont work, use git bash

TERMINAL COMMANDS FOR FILE MANIPULATION
# ls
    [used to 'list' contents of the current working directory]
# ls -a
    [used to 'list all contents including hidden files and folder' of the current working directory]
# start .
    [to open the current working directory in file explorer]
# ls folder_name
    [used to 'list' contents of that folder]
# ls folder_name/folder_name
    [used to 'list' contents of that folder inside folder]
# pwd
    [used to print the 'present working directory']
    [/c/Users/Administrator]
# cd folder_name/
    [cd is an acronym for 'Change Directory']
#cd ..
    [move back from current working directory one level]
# touch purple.js
    [creates 'purple.js' file in the current Directory]
    [creating single file]
# touch purple.js red.css
    [creates 'purple.js and red.css' file in the current Directory]
    [creating multiple files]
# touch Pets/Horses/rocky.png
    [creates 'rocky.png' file in the given path directory]
# mkdir Raghul
    [creates a 'Raghul' folder in the current working directory]
# mkdir Raghul Raju
    [creates a 'Raghul and Raju' folders in the current working directory]
# rm purple.js
    [to delete the file from the current directory permanantly]
# rm purple.js red.js
    [to delete multiple files from current directory permanantly]
# rm -rf Raghul
    [to delete the folder from the current working directory]
    [r-recusive,f-force]
<------------------------------->

BASIC SETTINGS USING GIT COMMAND
# git --version 
    [displays the git version installed in our machine]
# git config --global user.name "Raghul Ashok"
    [to set user name of git in our machine]
# git config --global user.email raghulashok16@gmail.com
    [to set user email of git in our machine]
# git config user.name
    [to check the user name in our git]
# git config user.email
    [to check the user email in our git]
<------------------------------->

REPOSITORY = a git repo is a workspace which tracks and manages files within a folder, each repo has its own history
<------------------------------->
Note: before we can do anything git-related, we must initialize a repo first!, this is something you do once per project. initialize the repo in the top-level folder containing your project

Note: git status command will display the status of the git only after git init command was used............

Note: do not use [git init] inside a repo, this will corrupt that REPOSITORY, so always use [git status] to check wether repo is already initialized
<------------------------------->

THINGS TO DO BEFORE COMMITING
# git status 
    [gives information on the current status of a git repository and its contents]
# git init 
    [to create a empty git repository]
<------------------------------->

BASIC GIT WORKFLOW
1. work on stuff --> make new files, edit files, delete files,etc
2. add changes --> group specific changes together, in preparation of committing
3. commit --> commit everything that was added
<------------------------------->

ADDING
1. updates particular/all files from working area to staging area.
# git add file1 file2 
    [file1 and file2 will be staged]
# git add . 
    [stage all files from working area]
<------------------------------->

COMMITING
1. updates particular/all files from staging area to repository.
# git commit
# git commit -m "message for that commit"
<------------------------------->

LOGGING
# git log 
    [logs all the commits with their messages]
<------------------------------->

ATOMIC COMMITS
1. commit a single change,features or single fix with a meaningfull message.
2. this helps easier to rollback changes later on.
3. it also helps review or project/code easier.
4. finally commit singe thing commit/single file commit as possible.
<------------------------------->

MESSAGES
1. always use present tense for the commit messages.
<------------------------------->

CONFIG SETTINGS FOR VS CODE
1. VS Code config must be set before using git commit because it will need a external editor to write some large messages.
2. So search config from internet and run git config command for vs code.
3. Also install code in vs code from cntrl+shift+p command.
<------------------------------->

 ONELINE LOGGING
 # git log --oneline
    [this will log the first line of the commit messages form all the commits]
<------------------------------->

AMMENDING COMMITS
1. You can redo the preious commit using he --amend option.
2. This will add some additional files to the previous commit.
# git commit -m "some message"
# git add forgotten_file
# git commit --amend
<------------------------------->

IGNORING FILES
1. We can tell git which files and directories to ignore in a given repository using a .gitignore file.
2. This is important while we use important credentials and some api keys that others dont want to see that.
<------------------------------->

BRANCHES
1. think of branches as alternative timeline for a project.
2. they enable us to create separate contexts where we can try new things, or even work on multiple ideas in parallel.
3. if we make changes on one branch, they do not impact the other branches(unless we merge the changes).
<------------------------------->

MASTER BRANCH
1. default branch name is master.
2. it does not do anything special or have fancy powers.
3. it is just like other branches.
<------------------------------->

HEAD
1. simply a pointer that refers to the cuurent loaction in your repository.
2. it points to a particular branch reference.
3. it always points to the latest commit you made.
<------------------------------->

VIEWING BRANCHES
1. git branch command is used to view your existing branches.
2. default branch in every git repo is master, though you can configure this.
# git branch
    [ it will show all branch in that repo ]
    [ * represent the active branch we are on ]
<------------------------------->

CREATING BRANCHES
1. git branch branch_name command is used to create new branch upon the current head.
2. this will just create the branch and it will not switch to that branch(head stays the same).
# git branch branch_name
<------------------------------->

SWITCHING BRANCHES
1. after creating the branch we can switch between branches using these commands.
# git switch branch_name
<------------------------------->

ANOTHER WAY OF SWITCHING BRANCHES
1. checkout command was made to add a standalone switch command which is much simpler.
2. swich was the new way and checkout was the old school.
# git checkout branch_name
<------------------------------->

CREATING AND SWITCHING BRANCHES
1. -c flag is used to create a new branch.
2. swich command is used to move to that branch.
3. this combination will do in a single line.
# git switch -c branch_name
<------------------------------->

SWITCHING BRANCHES WITH UNSTAGED FILES
1. data will be lost without commiting and switching branches.
2. always commit before switching branches.
3. data will be overwritten if we dont commit them.
<------------------------------->

DELETING BRANCHES
# git branch -D branch_name
# git branch -d branch_name
1. D is shortcut for force delete and d is normal delete.
2. this should be done when necessary.
<------------------------------->

RENAMING BRANCHES
1. move to that branch.
2. use m flag to rename the branch.
# git switch branch_name
# git branch -m new_branch_name
<------------------------------->

MERGING BRANCHES
1. branching makes it super easy to work within self-contained context, but often we want to incorporate changes from one branch into another.
2. we can do this using git merge command.
3. we merge branches, not specific commits.
4. we always merge to the current HEAD branch.
# git switch master
# git merge sub_branch
5. this method is called a fast-forward merge.
<------------------------------->






