# ----------------- ES TOPICS THAT WE NEED TO LEARN REACT JS ----------------- #
1. destructuring objects and arrays.
2. rest/spread operator.
3. template literals.
4. ternaries.
5. arrow function.
6. short circuiting.
7. optional chanining.
8. array map method.
9. array filter method.
10. array reduce method.
11. array sort method.
12. working with immutable arrays.
13. asynchronous javascript: promises.
14. asynchronous javascript: async/await.

# ---------------------- DESTRUCTURING OBJECTS AND ARRAY --------------------- #
1. destructuring allow us to access single or multiple values in a single line.

    const {title, author} = bookObject;

2. the name we use to destruct must be same as the key name in the object.
3. this is very helpfull when we work with api.
4. for array destructuring, we can use the same way but we should use a square bracket instead of cury braces.

    const [firstElement, SecondElement, ThirdElement] = ourArray;

# -------------------------- REST / SPREAD OPERATOR -------------------------- #
1. rest operator is used to store the remaining values into our required operation.
2. in array destructuring we can use rest operator to store excess element in a array.

    const [firstElement, ...otherElements] = ourArray;

3. in array destructuring it is mandatory to use rest operator at end.
4. if we destruct a element after rest operator it will result in a error.
5. the main use of spread operator is to get all the value out of a array/object.

    const ourArray = [...arr1, ...arr2];

6. the above code is used to create a new array without affecting the original array.

    const ourArray = [...arr1, 'newElement'];

7. in this example we can create a new array by adding a aditional string element at the end.
8. same is used to create an object.

    const newObj = {
        ...oldObj,
        pages:1210,
        author:'raghul ashok',
    };

9. the above code will create a new object without affecting the original oldObj.
10. the additional properties will be overwritten in the newObj.
11. to override an existing property always use spread operator at the begining.

# ----------------------------- TEMPLATE LITERALS ---------------------------- #
1. it was introduced in es6.
2. it mainly used to use js expressions inside strings.

    const summary = `${title} ia a book with ${5+6} pages`;
    const letters = `${author.split('-')}`;

# --------------------------------- TERNARIES -------------------------------- #
1. it is a special operator with three operands.

    pages>1000 ? 'over a thousand' : 'less than thousand';
    const result = `rammin got ${marks>49 ? 'pass' : 'fail'} marks`;

# ------------------------------ ARROW FUNCTION ------------------------------ #
1. it is a new way of writing functions in javascript.
2. it was introduced in es6.
3. it is also called one liner function.

# ------------------ SHORT CIRCUITING AND LOGICAL OPERATORS ------------------ #
1. in the short circuiting with &&, if the first value is true then the second value will run, if first value is false then the second value will not run.
2. in the short circuiting with ||,if first value is true then the second value will not run, if the first value is false then the second value will run.
3. but when we use nullish coalescing operator, if the first value is null/undefined then the second value will run.

# ----------------------------- OPTIONAL CHAINING ---------------------------- #
1. sometimes we face a error 'cannot read properties of undefined'.
2. this occurs mostly in accessing obect key which was not there.

    const bookReview = book.reviews.libraryyhing?.reviews;
    const bookReview = book.reviews?.libraryyhing?.reviews ?? 0;

3. (?.) - is the optional chanining symbol.
4. by using optional chanining we can set default value because js will throw error if we try to read undefined.

# ----------------------------- ARRAY MAP METHOD ----------------------------- #
1. these method do not mutate the original array.
2. basically a map method will loop through all the element in the array and returs the same length with some operation applied.

    const x = [1,2,3,4,5].map((el) => el*2);

# ---------------------------- ARRAY FILTER METHOD --------------------------- #
1. it is used to filter out elements based on the conditions we apply.

    const x = [1,2,3,4,5,6].filter((el) => el%2===0);
    const indianBooks = books.filter((book) => book.contry ==='india' );

2. we chain multiple filter methods.

    const x = [1,2,3,4,5,6].filter((el) => el%2 === 0).filter((el) => el%3 === 0);

# ---------------------------- ARRAY REDUCE METHOD --------------------------- #
1. reduce method is the most versatile and most powerfull method in js.
2. the goal of the reduce method is to reduce to a single value output.
3. reduce method has 2 things a function and a starting value.
4. that function has 2 things accumulator and a working array value.

    const pagesAllBooks = books.reduce((acc,book)=>acc+book.pages,0);

# ----------------------------- ARRAY SORT METHOD ---------------------------- #
1. to sort a array in ascending way use a-b;

    const sorted = arr.sort((a,b) => a-b);

2. to sort a array in descending way use b-a;

    const sorted = arr.sort((a,b) => b-a);

3. while using array sort method use it caustious, because it mutates the original array.
4. in react we need this sort method in most times.
5. so there is a solution for that using slice().

    const sorted = arr.slice().sort((a,b) => a-b);

6. with this method we can still work without affecting the original array.
7. this same method is used for sorting objects using any key.

    const sorted = arr.slice().sort((a,b) => a.pages-b.pages);

8. here we have to mention the correct key name of property or else it wont work.
9. finally we can do both ascending and descending sort with both object and array.

# ----------------------- WORKING WITH IMMUTABLE ARRAYS ---------------------- #
1. add book object to end of the array.

    const newBook = {
        id: 6,
        author: 'kim',
    };
    const booksAfterAdd = [...books, newBook];

2. delete book object from array having id 3.

    const booksAfterDelete = books.filter((book) => book.id !== 3);

3. update book page number to 1201 in object which has id = 1 in the array.

    const bookAfterUpdate = books.map((book) => book.id === 1 ? { ...book, pages: 1201 } : book);

# --------------------- ASYNCHRONOUS JAVASCRIPT: PROMISES -------------------- #
1. in order to fetch data from an api in the browser we have a method called fetch API.
2. it is a function into which we pass a url of an api.
3. to test the fetch method use a dummy api.
4. json placeholder is a dummy api website availabe.
5. fetch method basically returns a promise.
6. promise can be anything like - pending,error,fullfiled,etc.
7. we can add .then() to work with that promise.
8. then() will be automatically called as soon the promise fullfiled status.

    fetch('api url')
    .then((res) => res.json())
    .then((data) => console.log(data));

9. res is the response from the api which needs to be converted.
10. data is the converted format which we use in the react applications.

# ------------------- ASYNCHRONOUS JAVASCRIPT: ASYNC/AWAIT ------------------- #
1. this is another method to fetch data from api url.

    async function getData() {
        const res = await fetch('api url');
        const data = await res.json();
        console.log(data);
    }

2. avoid returns from async function beacuse javascript wont wait in normal function.
3. so for that purpose async functions was introduced just to set state variable for component.

# --------------------- RENDERING ROOT COMPONENT IN REACT -------------------- #
1. delete all files in src folder.
2. create index.js, it is the entry point.

    import React from 'react';
    import ReactDom from 'react-dom/client';

3. now create a function app.

    function App() {
        return <h1>Hello Raghul</h1>;
    }

4. now create the root.

    const root = ReactDom.createRoot(document.getElementById("root"));

5. finally render the app component with root which we created now.

    root.render(<App/>);

6. this method is react v18 and before 18 render was different.

# ----------------------------- REACT STRICT MODE ---------------------------- #
1. wrapping app component inside react.strictmode component.

    root.render(
        <React.StrictMode>
            <App/>
        </React.StrictMode>
    );

2. it will render twice while development.
3. it will check if there are any outdated parts of the React API.
4. it is a good practise to use strict mode in development process because it will help us find bugs.

# --------------------------------- DEBUGGING -------------------------------- #
1. if our changes did not reflect in browser, then check if our app is running, if not we can stop and restart the app again, you can also hard reload the browser.
2. always check on the terminal and inpect window open in all time.
3. Eslint will warn about the unused variables as warnings.

# ----------------------- COMPONENT AS BUILDING BLOCKS ----------------------- #
1 .components are the fundamental parts of react.
2. react applications are entirely made out of components.
3. these are building blocks of user interfaces in react.
4. basically react takes all components and draw them onto a webpage.
5. in technical terms, react renders a view for each component, ald all these views together make up the user interface.
6. component is piece of ui that has its own data, logic and appearance.
7. in react we build complex ui by building multiple components and combining them.
8. components can be reused, nested inside each other, and pass data between them.

# --------------------- CREATING AND REUSING A COMPONENT --------------------- #
1. in react we write components using functions and it is called functional components.

    function Pizza () {
        return (
            <h2>pizza</h2>
        );
    }

2. rules: 
    -- function name should start with capital letter.
    -- function needs to return some markups.
    -- each function should return one single parent element.
    -- multiple child element are not allowed to return from the functional component.
    -- nesting components will work but not recomended.

    function App () {
        function Pizza () {
            return (
                <h2>pizza</h2>
            );
        }
        return (
            <div>
                <p>today special</p>
                <Pizza/>
            </div>
        );
    }

    -- the above code will work but not recomended by develpers.


3. after creating the functional component add the component name as element as shown below.

    function App () {
        return (
            <div>
                <p>today special</p>
                <Pizza/>
            </div>
        );
    }

# ------------------------------- WHAT IS JSX? ------------------------------- #
1. JSX is a declarative syntax to describe what components look like and how they work.
2. so each component must return one block of JSX, which react will ten use to render the component on the ui.
3. JSX is the extension of javascript that allows us to embed javascript, css and react components into HTML.
4. babel is a tool which is included when we create a react app and this tool automatically converts our JSX into javascript.
5. each JSX element is connverted automatically to a React.createElement function call like the below.

    <header>
        <h1 style= "color: red">
            Hello React!
        </h1>
    </header>

    React.createElement(
        'header',
        null,
        React.createElement(
            'h1',
            { style: { color: 'red' } },
            'Hello React!',
        )
    );

6. when we try to build UI using vanilla javascript, we will use a imperative approach.
7. this means that we manually select elements, 

# ------------------------------- SECTION - 16 ------------------------------- #
# ------------------------------ USEREDUCER HOOK ----------------------------- #
1. this is a another way to manage state in React.
2. useReducer hook works with a reducer function which is a pure function.
3. this function will take in the previous state and it is called action as an argument and will then return the next state.
4. the below example is a use reducer for managing single state.

    const [count, dispatch] = useReducer(reducer, 0);

5. after this create the reducer function outside the function component.

    function reducer(state, action){

    }

6. so there is doubt, when does this reducer function will be called?
7. now dispatch function will come in play.

    dispatch(our_next_state_value);

8. place this dispatch function inside our event handler.
9. this dispatch function will then call the reducer function.
10. in reducer function, state->previous state, action-> our_next_state_value.
11. in the useReducer 0 is the initial state value.

    function reducer(state, action){
        return state + action;
    }

12. the returned value from the reducer function will be the new state value.
13. when we have multiple actions we mention it with 'type' and 'payload'.
14. this type and payload should be wrapped in {  }.

    dispatch({type: "type_name", payload: our_next_state_value});

15. this template is also used in the redux.
16. with the type came into the reducer function we can return based on that type as below.

    function reducer(state, action){
        if(action.type === "inc") return state + action.payload;
        if(action.type === "dec") return state - action.payload;
        if(action.type === "setcount") return action.payload;
    };

17. this above useReducer is created only to manage single state.
18. for using multiple states, we must create the state in object format.

# -------------------- MANAGING ALL STATES IN A COMPONENT -------------------- #
1. first thing is to create a initial value object outside the function component.

    const initialState = {
        count: 0,
        step: 1,
    };

2. create the useReducer hook with name 'state' or your prefered name.
3. next pass the initialState value for the useReducer.

    const [state, dispatch] = useReducer(reducer, initialState);

4. next destruct the state in our functional component.

    const {count, step} = state;

5. by this method we can use these values inside our component.
6. in the reducer function, use switch statement instead of if statement.

    function reducer(state, action){
       switch(action.type){
        case "dec":
            return {...state, count: state.count - state.step};
        case "inc":
            return {...state, count: state.count + state.step};
        case "setCount":
            return {...state, count: action.payload};
        case "setStep":
            return {...state, step: action.payload};
        default:
            throw new Error("unknown error");
       };
    };

7. by this way we can handle multiple states using useReducer.
8. in this method resetting value is very easy.

    case "reset":
        return {count:0, step:1};

9. so just dispatch with type 'reset'.

    dispatch({type: "reset"});

10. useReducer is mainly creadted to centralize all the state updates of the component in a single place.

# -------------------- MANAGING STATE WITH USEREDUCER HOOK ------------------- #
1. why useReducer?
2. state management with useState is not enough in certain situations.
3. when components have a lot of state variables and state updates, spread across amny event handlers all over the component.
4. when multiple state updates need to happen at the same time (as a reaction to the same event, like "starting a game").
5. when updating one piece of state depends in one or multiple other pieces of state.
6. in all these situations, useReducer can be of great help.
7. state with useReducer, an alternative way of setting, ideal for complex state and related pieces of state.
8. state with useReducer, stores pieces of state in astate object.
9. reducer: function that containing all logic to update state. decouples state logic from component.
10. reducer: pure function(no side effects!) that takes current state and action, and returns the next state.
11. action: object that describes how to update state.
12. dispatch: function to trigger state updates, by "sending" actions from event handlers to reducer.

# ---------------------- REACT QUIZ APP USING USEREDUCER --------------------- #
1. this app works using fake API.
2. we can create a fake API using an npm package called json-server.
3. open terminal window in the bottom of vs code.
4. open new terminal for the fake API and run the below command.

    npm i json-server

5. now create a new folder in our react app (foler_name -> data).
6. now paste the json file containing all the quiz for our app.
7. to run the json server we need add some script in the package.json file.

    "script":{
        "server": "json-server --watch data/questions.json --port 9000",
    }

8. add the above "server" inside the "scripts" in package.json file.
9. make sure the port is not used for other process.
10. finally run the below command in the new terminal.

    npm run server

11. the above command will run in port 9000 and our react app will run in port 3000.
12. to check if our fake API worked or not, type the below url in the browser and the json format will be displayed.

    localhost:9000/questions

13. if any doubt check the video lecture.
14. inside our react app, using fetch method get all the data from the fake API.

    useEffect(function () {
        fetch("http://localhost:9000/questions")
        .then((res) => res.json())
        .then((data) => dispatch({ type: 'dataRecevied", payload: data }))
        .catch((err) => dispatch({ type: 'dataFailed'}));
    }, []);

15. now create the initialState outside function component.

    const initialState = {
        questions: [],
        // 'loading', 'error', 'ready', 'active', finished'
        status: 'loading'
    }

16. now create the reducer function for the basic state updates.

    function reducer(state, action) {
        switch(action.type) {
            case 'dataRecevied':
                return {
                    ...state,
                    questions: action.payload,
                    status: 'ready',
                };
            case 'dataFailed':
                return {
                    ...state,
                    status: 'error',
                };
            default:
                throw new Error('Action unknown');
        }
    };

17. in the useReducer hook, we destruct our states[nested destructuring].

    const [ {questions, status}, dispatch ] = useReducer( reducer, initialState );

18. using 'status' state we can conditionally display components.
19. if 'status' === 'loading', we can display a loader component.
20. if 'status' === 'error', we can display a error component.

    {status === 'loading' && <Loader/>}
    {status === 'error' && <Error/>}

21. check the working using network tab in inpect console window by choosing slow 3g and by stopping the json-server.
22. after the status got ready, render the quiz welcome component.

    {status === 'ready' && <StartScreen/>}

23. now calculate the questions state length and pass it as a props to the StartScreen

    {status === 'ready' && <StartScreen numQuestions={numQuestions} />}

24. here numQuestions is the length of the questions in our quiz.
25. now create a action type in reducer function that changes the status to 'active'.
26. if status changed to 'active' then render the Questions component.

    {status === 'active' && <Questions/>}

27. we can do it inside the <StartScreen/> component.
28. to do so we pass dispatch() function inside it, so we pass the function as props to it.

    {status === 'ready' && <StartScreen numQuestions={numQuestions} dispatch ={dispatch} />}

29. in the <StartScreen/> component, create a button that starts the quiz.

    onclick={() => dispatch({ type: "start" })}

30. in the reducer function add a case that changes the status 'active'.

    case 'start':
        return { 
            ...state, 
            status: 'active' 
        };

31. to track the question we create a state variable named 'index' or 'questionIndex'.

    const initialState = {
        index: 0,
    }

32. <Questions/> component will be displayed when the status === active.
33. in this component we pass the props value ( question = {questions[index]} )
34. inside the Questions component destruct the question props.
35. before using, inside the component, just console and check the structure of the question.
36. inside the <Questions/> component map the options array as individual buttons to track the record.
37. to reduce the code size create a separate component for options and pass the question as props.
38. more states and dispach function added refer the video.
39. conditionally rendered components, please refer  the video.
40. learn cleanup function in timers (setinterval cleanup).

# -------------------------- USESTATE VS USEREDUCER -------------------------- #
1. useState
    -- ideal for single independent pieces of state(numbers, strings, single arrays, etc.)
    -- logic to update state is placed directly in event handlers or effects, spread all over one or multiple components.

    setScore(0);
    setPlaying(true);

    -- state is updated by calling setState (setter returned from useState)
    -- imperative state update.
    -- easier to understand and to use.
    
2. useReducer
    -- ideal for multiple related pieces of state and complex state(eg. object with many values and nested objects or arrays).
    -- logic to update state lives in one central place, decoupled from components: the reducer.
    -- state is updated by dispatching an actioon to a reducer.
    -- declarative state updates: complex state transtions are mapped to actions.

    dispach({type: 'startGame'});

    -- more difficult to understand and implement.

3. ask yourself, do you have single or multiple states, do they want to update individualy or at the same time together.

# ------------------------------- SECTION - 17 ------------------------------- #
# --------------------------- WHAT IS CONTEXT API ? -------------------------- #
1. when we pass state into multiple deeply nested child components, we involve in a concept called prop drilling.
2. prop drilling is not prefered by developers beacuse it is very hard to find the flow of data and in debugging.
3. so react created a method to pass the state from parent to deeply located child component directly without prop drilling.
4. so that concept was called context API.
5. when we use context api, it allows us to read state from everywhere in the tree.
6. in other words, context api is system to pass data throughout the app without manually passing props down the tree.
7. it allows us to "broadcast" global state to the entire app.
8. PROVIDER   - gives all child components access to value.
9. VALUE      - data that we want to make available (usually state and functions)
10. CONSUMERS - all components that read the provided context value.
11. usually PROVIDER wraps around the APP component.
12. whenever the VALUE is updated all CONSUMERS will be re-render.
