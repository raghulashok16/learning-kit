COLORS:
1. text-primary [blue text]
2. text-danger [red text]
3. text-success [green text]
4. text-secondary [grey text]
5. text-waning [yellow text]
6. text-info [sky blue text]
7. text-light [light grey text or half white ]
8. text-dark [black text]
<------------------------------->

BACKGROUND:
1. bg-primary [blue text]
2. bg-danger  [red text]
3. bg-success [green background]
4. bg-secondary [grey background]
5. bg-waning [yellow background]
6. bg-info [sky blue background]
7. bg-light [light grey background or half white ]
8. bg-dark [black background]
<------------------------------->

CSS VARIABLES:
1. css variables can be used in this way by add it in the css styles.
    <h1 style ="color:var(--bs-blue)"> </h1>
# --bs-blue
# --bs-primary
<------------------------------->

BREAKPOINTS:
1. they are the media quries that bootstrap using for its responsive design.

0 to 575.98px [Xsmall devices]
576px to 767.98px [Small devices]
768px to 991.98px [Medium devices]
992px to 1199.98px [Large devices]
1200 to 1399.98px [Xlarge devices]
<------------------------------->

CONTAINERS:
1. bootstrap have containers like - sm, md, lg, xl, xxl, fluid.
2. sm [occupies 100% of the screen when width of the screen is smaller than 567px]
3. md [occupies 100% of the screen when width of the screen is smaller than 768px]
4. lg [occupies 100% of the screen when width of the screen is smaller than 992px]
5. xl [occupies 100% of the screen when width of the screen is smaller than 1200px]
6. xxl [occupies 100% of the screen when width of the screen is smaller than 1400px]
<------------------------------->

GRID:
1. Bootstrap’s grid system uses a series of containers, rows, and columns to layout and align content.
2. It’s built with flexbox and is fully responsive.
3. every col must be wrapped inside the row class.
    <div class="row">
        <div class="col"></div>
    </div>
4. maximum number of columns for numbers inside the screen is 12.
5. if we go on and add 13 columns then the layout will be broken.
6. we can use col-1 to col-12, but we should not go beyond twelve.
    <div class="row">
        <div class="col-6"></div>
        <div class="col-6"></div>
    </div>
7. example col-6 and col-6 is correct but col-8 and col-8 is not correct and it will break the layout
8. we can use a column responsive using the containers
    <div class="row">
        <div class="col-md"></div>
        <div class="col-xxl"></div>
    </div>
9. we can add different width according to the screen, same column behaves differently
    <div class="row">
        <div class="col-xxl-6 col-xl-6 col-lg-7 col-md-4 col-sm-8 col-5"></div>
    </div>
10. to make a column that has variable width according to the content, use col-auto
    <div class="row">
        <div class="col-xxl-auto col-xl-6"></div>
    </div>
11. to stack to horizontal, use col-breakpoint
    <div class="row">
        <div class="col-xxl"></div>
        <div class="col-xxl"></div>
    </div>
12. to specify how many columns inside the row, if we add beyond the value the the layout will be broken
    <div class="row row-cols-2">
        <div class="col"></div>
        <div class="col"></div>
        <div class="col"></div>
    </div>
13. row and columns based on the width of the content
    <div class="row row-cols-auto">
        <div class="col"></div>
        <div class="col"></div>
        <div class="col"></div>
    </div>
14. nesting row inside column is posible
<------------------------------->

COLUMNS:
1. For vertical alignment make sure height and color property is set to the div so that we can see visible changes.

2. align-items class should be added to the row div.
# align-items-center [center all the col in vertical direction in the row]
# align-items-start [align all the col to the top of the row]
# align-items-end [align all the col to the bottom of the row]

3. align-self class should be added to the column div.
# align-self-center [only align the col to the center of the row in vertical direction]
# align-self-start [only align the col to the top of the row in vertical direction]
# align-self-end [only align the col to the bottom of the row in vertical direction]

4. For horizontal alignment, justify-content class should be added to the row div.
# justify-content-start [align all col to the start of the row in horizontal direction]
# justify-content-center /[lign all col to the middle/center of the row div in horizontal direction]
# justify-content-end [align all col to the end of the row in horizontal direction]
# justify-content-around [align all col with some space to the left and right of the row in horizontal direction]
# justify-content-between [try it]
# justify-content-evenly [try it]

5. full width class is used to break a line instead of using br tag.
# w-100 [used to take the full width]

6. order class is used to reorder a column in our desired oreder from 1 to 5.
# order-1 [used to rearrange the order of the column]
# order-2
# order-3
# order-4
# order-5
# order-last

7. offset class is used to move colum range from 0 to 4
# offset-md-4




