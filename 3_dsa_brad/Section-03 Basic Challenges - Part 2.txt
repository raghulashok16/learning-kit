# ------------------- Section 3: Basic Challenges - Part 2 ------------------- #
16. FizzBuzz Array
17. Array Intersection
18. Display Likes
19. Find Missing Number
20. Find Missing Letter
21. Are All Chars Unique?
22. First Non-Repeating Character
23. Dice Game Simulation
24. Format Phone Number
25. Validate Email

# ---------------------------- 16. FizzBuzz Array ---------------------------- #
const method1 = (num) => {
    let arr = [];
    for (let i = 1; i <= num; i++) {
        if (i % 3 === 0 && i % 5 === 0) {
            arr.push('FizzBuzz');
        } else if (i % 3 === 0) {
            arr.push('Fizz');
        } else if (i % 5 === 0) {
            arr.push('Buzz');
        } else {
            arr.push(i);
        }
    }
    console.log('arrv', arr);
}
method1(15);
method1(5);

# -------------------------- 17. Array Intersection -------------------------- #
const method1 = (arr1, arr2) => {
    const intersection = [];

    for (let i = 0; i < arr1.length; i++) {
        if (arr2.includes(arr1[i]) && !intersection.includes(arr1[i])) {
            intersection.push(arr1[i]);
        }
    }
    console.log(intersection)
};
method1([1, 5, 3, 6, 8], [1, 33, 5, 43, 10]);

# ----------------------------- 18. Display Likes ---------------------------- #
const method1 = (arr) => {
    const count = arr.length;
    console.log(count);
    switch (count) {
        case 0:
            console.log(`no one likes this`);
            break;
        case 1:
            console.log(`${arr[0]} likes this`);
            break;
        case 2:
            console.log(`${arr[0]} and ${arr[0]} like this`);
            break;
        case 3: console.log(`${arr[0]}, ${arr[1]} and ${arr[2]} like this`);
            break;
        default: console.log(`${arr[0]}, ${arr[1]} and ${arr.length - 2} others like this`);
            break;
    }
};
method1(['raghul', 'ashok', 'kamal', 'sundar', 'suresh']);
method1(['raghul', 'ashok', 'kamal']);
method1([]);

# -------------------------- 19. Find Missing Number ------------------------- #
const method1 = (arr) => {
    let actualValue = 0;
    const n = arr.length + 1;
    const expectedValue = (n * (n + 1)) / 2;
    for (let i = 0; i < arr.length; i++) {
        actualValue = actualValue + arr[i];
    }
    console.log(expectedValue - actualValue);
};
method1([1, 2, 3, 4, 5, 7, 8, 9, 10]);

# -------------------------- 20. Find Missing Letter ------------------------- #
const method1 = (arr) => {
    const letters = 'abcdefghijklmnopqrstvuwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const index = letters.indexOf(arr[0]);

    for (let i = 0; i < arr.length; i++) {
        // console.log(letters[index + i], arr[i]);
        if (arr[i] != letters[index + i]) {
            console.log(letters[index + i]);
            break;
        }

    }
};
method1(['a', 'b', 'c', 'e']);
method1(['e', 'g', 'h']);
method1(['R', 'T', 'U']);
method1(['K', 'L', 'N']);

const method2 = (arr) => {
    const code = arr[0].charCodeAt(0);
    // console.log(code);
    for (let i = 0; i < arr.length; i++) {
        // console.log(arr[i].charCodeAt(0), code + i)
        if (arr[i].charCodeAt(0) != (code + i)) {
            console.log(String.fromCharCode(code + i));
            break;
        }

    }
};
method2(['a', 'b', 'c', 'e']);
method2(['e', 'g', 'h']);
method2(['R', 'T', 'U']);
method2(['K', 'L', 'N']);

# ------------------------- 21. Are All Chars Unique? ------------------------ #
const method1 = (str) => {
    const uniqueArray = [];
    for (let i = 0; i < str.length; i++) {
        // console.log(str[i]);
        if (!uniqueArray.includes(str[i])) {
            uniqueArray.push(str[i]);
        } else {
            return false;
        }

    }
    return true;
};
console.log(method1('abcdefg'));
console.log(method1('abab'));
console.log(method1('Aeioua'));

const method2 = (str) => {
    const tempObject = {};
    for (let i = 0; i < str.length; i++) {
        if (tempObject[str[i]]) {
            return false;
        }
        tempObject[str[i]] = true;
    }
    return true;
};
console.log(method2('abcdefg'));
console.log(method2('abab'));
console.log(method2('Aeioua'));

const method3 = (str) => {
    const tempSet = new Set();
    for (let i = 0; i < str.length; i++) {
        if (tempSet.has(str[i])) {
            return false;
        }
        tempSet.add(str[i]);
    }
    return true;
};
console.log(method3('abcdefg'));
console.log(method3('abab'));
console.log(method3('Aeioua'));

# --------------------- 22. First Non-Repeating Character -------------------- #
const method1 = (arr) => {
    const tempObject = {};
    for (const char of arr) {
        tempObject[char] = (tempObject[char] || 0) + 1;
    }
    for (const char of arr) {
        if (tempObject[char] === 1) {
            return char;
        }
    }
    return null;
    // return tempObject;
};
console.log(method1(['a', 'd', 'f', 'r', 'q', 'd', 'p', 'a', 'a']));

# ------------------------- 23. Dice Game Simulation ------------------------- #
function rollDice() {
    const diceValue = Math.floor(Math.random() * 6) + 1;
    return diceValue;
}
const method1 = (numSimulations) => {
    const results = [];
    // console.log(rollDice());
    for (let i = 0; i < numSimulations; i++) {
        // console.log(i)
        const dice1 = rollDice();
        const dice2 = rollDice();
        const sum = dice1 + dice2;
        let result = '';
        if (sum === 7 || sum === 11) {
            result = 'win';
        } else if (sum === 2 || sum === 3 || sum === 12) {
            result = 'lose';
        } else {
            result = 'roll again';
        }
        results.push({ dice1, dice2, sum, result });
    }
    return results;
};
console.log(method1(4));

# -------------------------- 24. Format Phone Number ------------------------- #
const method1 = (phoneNumber) => {
    const areacode = phoneNumber.slice(0, 3).join('');
    const prefix = phoneNumber.slice(3, 6).join('');
    const lineNumber = phoneNumber.slice(6).join('');

    console.log(areacode, prefix, lineNumber);
    return `${areacode} ${prefix}-${lineNumber}`
};
console.log(method1([9, 8, 6, 8, 1, 8, 4, 6, 2, 6,]));

const method2 = (phoneNumber) => {
    const str = phoneNumber.join('');
    return `${str.substring(0, 3)} ${str.substring(3, 6)}-${str.substring(6)}`;
};
console.log(method2([9, 8, 6, 8, 1, 8, 4, 6, 2, 6,]));

# ---------------------------- 25. Validate Email ---------------------------- #