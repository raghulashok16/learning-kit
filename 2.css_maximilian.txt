# -------------------------------- what is css ------------------------------- #
1. css - cascading style sheet.
2. it make our webpage look good.
3. usualy webpage consist html.
4. html shows content on your page.
5. so there are no webpage without html.
6. on the otherhand css allow us to style the html content.
7. it allow us to add colors, shadows, visual effects, etc.
8. css will change our boring html pages into good looking webpage.

# ----------------------- css history, present & future ---------------------- #
1. it was introduced in 1996, refered as css 1.
2. in 1998, css2 was introduced.
3. still css3 is in development.
4. and no css4 will be there.
5. instead of creating new versions css was sub divided into independent modules.
6. modules on text, modules on color, modules on shadows, etc.

# ---------------------- 3 different ways of adding css ---------------------- #
1. using inline styling.

    <p style="color:red">helo css</p>

2. using style tag.

    <style>
        p{
            color:red;
        }
    </style>

3. using external css file.[create a file name 'main.css'][inside this file write the css code]

    <link rel="stylesheet" href="main.css">

# -------------------------------- font color -------------------------------- #
1. to change a font color use 'color' property.

    color: white;

# ---------------------------- changing font style --------------------------- #
1. to change font style use 'font-family' property.

    font-family: sans-serif;

2. there are some default fonts available in our browser.
3. open your browser setting and you change the default and other fonts.

# ------------------------------- google fonts ------------------------------- #
1. goto google fonts website and select your prefered font.
2. copy the link tag and past above the css link tag.
3. and then we can use our selected font using 'font-family' property availabe in the website.

# --------------------------------- selectors -------------------------------- #
1. element selector.

    h1{
        color: red;
    }

2. class selector.

    .class_name{
        color: red;
    }

3. universal selector. [rarely use this one]

    *{
        color: red;
    }

4. id selector.

    #id_name{
        color: red;
    }

6. attribute selector.

    [attribute_name]{
        color: red;
    }

# ------------------------- cascading and specificity ------------------------ #
1. if try to style two times to a tag, then some style override others.
2. so multiple rules affect the css styles.
3. specificity comes to play when we use multiple rules.
4. highest priority selectors will win.
5. "cascading" in  CSS  describes the method by which the browser determines which styles to apply to a given HTML element when there are multiple, potentially conflicting, rules.
6. so specificity resolves these conflicts.
7. inline->ID->class,pseudo-class,attribute->tag,pseudo-element selectors.
8. these are the order of specificity and inline has the highest priority.

# -------------------------------- inheritance ------------------------------- #
1. some styles pass down to the child elements.
2. usualy font-family comes to the child elements.
3. this will work when we set specific font-family to the body tag.
4. so inheritance is very important when passing down styles to the child elements.

# -------------------------------- combinators ------------------------------- #
1. combinator allow us to combine multiple selectors to be more precise about what we want to select.

# ---------------------------- list of combinators --------------------------- #
1. adjacent sibling [element share same parent] [second element comes immediately after first element]

    h2 + p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <h2>nope</h2>
        <h3>nope</h3>
        <p>nope</p>
        <h2>nope</h2>
        <p>css applied</p>
    </div>

2. general sibling [elements share same parent] [second element comes after first element]

    h2 ~ p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <h2>nope</h2>
        <h3>nope</h3>
        <p>css applied</p>
    </div>

3. child combinator [second element is a direct child of first element]

    div > p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <div>nope</div>
        <article>
            <p>nope</p>
        </article>
        <h3>nope</h3>
        <p>css applied</p>
    </div>

4. descendant combinator [second element is a descendant of the first element]

    div p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <div>nope</div>
        <article>
            <p>css applied</p>
        </article>
        <h3>nope</h3>
        <p>css applied</p>
    </div>

# ------------------- how to check box model in our browser ------------------ #
1. every element in html is interpreted as a box by css.
2. you can see the box in the chrome developer tool by inspecting that element.
3. every element has a content that is the blue area in the inspect window.
4. green area represents the padding.
5. yellow represents the border.
6. finally the orange color and it represents margin.

# ------------------------ understanding the box model ----------------------- #
1. add padding to the content.

    padding: 20px;

2. padding represents the gap between the content and the border.
3. border represents the line between the padding and the marging.
4. we can also add border style, border color, border width in addition.

    border-style: solid;
    border-color: black;
    border-width: 5px;

5. margin is the gap above the border.

    margin: 20px;

6. we can have a padding without margin and can have margin without border.
7. so anything is possible.

# -------------------------- removing default margin ------------------------- #
1. every element contains default margin.
2. css allow us to edit the default values.

    body{
        margin: 0;
    }

# ---------------------- understanding margin collapsing --------------------- #
1. if you have two elements next to each other.
2. either horizontal or vertical.
3. the margin with higher one win.
4. element1 - 2px and element2 - 5px, so margin between these two elements are 5px.
5. remember bigger margin wins.
6. in general use either one margin-top or margin-bottom.
7. this reduces marging collapsing.

# --------------------------- shorthand properties --------------------------- #
1. when combined values of multiple properties are wrapped in a single property it is known as shorthand property.
2. it is written in single line.

    border: 2px dashed orange;

3. we can mix the order of the arguments.
4. but while using margins order of arguments is important.

    margin: 5px 10px 5px 10px;
    margin: 5px 10px;
    margin:10px;

5. for 4 arguments - top, right, bottom, left.
6. for 2 arguments - top & bottom , left & right.
7. fot 1 argument - all sides.
8. we use lot of shorthand in css.
9. it allow us to write cleaner and shorter code.

# ------------------------- height and width property ------------------------ #
1. we can tell css to take our custom width.
2. also rember that block level element takes the full width.

    width: 100%;
    width: 50%;

3. width can be specified with percentage as well as using values.

    width: 300px;
    width: 700px;

4. height property is similar to width.

    height: 100%;

5. this code will take the full height of the parent container and not the full screen.
6. if we have multiple child then it adjust to the full height in the remainning available space inside the parent container.
7. we can also specify values to height argument.

    height: 400px;

# ------------------------- understanding box sizing ------------------------- #
1. default box sizing is content box sizing.
2. if we set a width and height of the content, not of the entire box including padding and border.
3. there is a way to include width and height of the content to the entire box including padding and border.
4. and that is border-box.
    
    box-sizing: content-box;
    box-sizing: border-box;

5. note that margin dont involve in this concept.
6. this concept involve just content, padding and border.

# --------------------------- adding header styles --------------------------- #
1. create a section, inside it add a div and nav.
2. inside the div place your logo.
3. inside the nav element place your links.
4. note that the links should be inside unordered list.
5. now add the css code.

    .main-header{
        width: 100%;
        background: #2ddf5c;
        padding: 8px 16px;
    }

# ---------------------- understanding display property ---------------------- #
1. in html we got inline and block level elements.
2. block takes the full width.
3. inline is placed in same line.

    display: inline;
    display: block;

4. we do have other display properties like none.

    display: none;

5. if we add the css code thent he element will not render in our webpage and its space is taken by the next element.
6. the code will be visible in the inspect window but it will not render.
7. this will be helpfull to show modals.

    display: inline-block;

8. this will setup in onle line, this behaves like an inline elements such that they only take as much widht as their content sheets and they fit into one line but they still have a box where we can set a padding and so on.
9. if we try to apply padding for element inside inline-block then the padding will be applied to left and right.
10. the padding will not be applied to the top and bottom, since the element is inside the inline-block element.
11. but if we try to add padding to the inline-block element then padding will be applied to all sides.

# -------------------- display: none vs visibility: hidden ------------------- #
1. 