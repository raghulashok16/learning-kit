# ---------------------- destructuring objects and array --------------------- #
1. destructuring allow us to access single or multiple values in a single line.

    const {title, author} = bookObject;

2. the name we use to destruct must be same as the key name in the object.
3. this is very helpfull when we work with api.
4. for array destructuring, we can use the same way but we should use a square bracket instead of cury braces.

    const [firstElement, SecondElement, ThirdElement] = ourArray;

# -------------------------- rest / spread operator -------------------------- #
1. rest operator is used to store the remaining values into our required operation.
2. in array destructuring we can use rest operator to store excess element in a array.

    const [firstElement, ...otherElements] = ourArray;

3. in array destructuring it is mandatory to use rest operator at end.
4. if we destruct a element after rest operator it will result in a error.
5. the main use of spread operator is to get all the value out of a array/object.

    const ourArray = [...arr1, ...arr2];

6. the above code is used to create a new array without affecting the original array.

    const ourArray = [...arr1, 'newElement'];

7. in this example we can create a new array by adding a aditional string element at the end.
8. same is used to create an object.

    const newObj = {
        ...oldObj,
        pages:1210,
        author:'raghul ashok',
    };

9. the above code will create a new object without affecting the original oldObj.
10. the additional properties will be overwritten in the newObj.
11. to override an existing property always use spread operator at the begining.

# ----------------------------- template literals ---------------------------- #
1. it was introduced in es6.
2. it mainly used to use js expressions inside strings.

    const summary = `${title} ia a book with ${5+6} pages`;
    const letters = `${author.split('-')}`;

# --------------------------------- ternaries -------------------------------- #
1. it is a special operator with three operands.

    pages>1000 ? 'over a thousand' : 'less than thousand';
    const result = `rammin got ${marks>49 ? 'pass' : 'fail'} marks`;

# ------------------------------ arrow function ------------------------------ #
1. it is a new way of writing functions in javascript.
2. it was introduced in es6.
3. it is also called one liner function.

# ------------------ short circuiting and logical operators ------------------ #
1. in the short circuiting with &&, if the first value is true then the second value will run, if first value is false then the second value will not run.
2. in the short circuiting with ||,if first value is true then the second value will not run, if the first value is false then the second value will run.
3. but when we use nullish coalescing operator, if the first value is null/undefined then the second value will run.

