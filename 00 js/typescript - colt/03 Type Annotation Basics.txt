11. Our First Type Annotation
12. Working With Numbers & Booleans
Quiz 1: Super Quick Quiz!
13. Compiling TypeScript
14. Type Inference
15. The Any Type
16. Delayed Initialization & Implicit Any
Quiz 2: Inference Quiz

# ---------------------------------------------- 11. Our First Type Annotation #
    - âœ… there are types in typescript.
    - âœ… Primitive Types -> Number, String, Boolean, Null, Undefined, Void, Any, Never, Unknown.
    - âœ… Object Types -> Object, Array, Function, Tuple, Enum, Others.
    - âœ… using this types we can tell typescript some basic conditions like "this object must have a property called colors, set to an array of strings", "this function returns a boolean", "this function accepts two numbers and returns a number", "this variable is a string".

ðŸš©ðŸš©ðŸš©ðŸš©
    const sample = 'so awesome';
    const sample: string = 'so awsome';
âš¡âš¡âš¡âš¡

    - âœ… if we give the value to different type after we set it to string, then the editor itself complain with the error occured.
    - âœ… this is due to the extension we installed -- refer section-2.
    - âœ… assigning a basic type to a variable is easy -> just add : Type after the variable name.
    - âœ… this is called "type annotation".

ðŸš©ðŸš©ðŸš©ðŸš©
    let myVar: type = value;
âš¡âš¡âš¡âš¡

    - âœ… we can tell typescript that something is a string using the annotation of string ( all lowercase ).

ðŸš©ðŸš©ðŸš©ðŸš©
    //Declaring a string variable
    let myString: string = 'someWords.....';

    //cant reassign to a different type
    mystring = 100;

    //can reassign to a value of same type
    myString = 'newWords.....';
âš¡âš¡âš¡âš¡

# ---------------------------------------- 12. Working With Numbers & Booleans #

    - âœ… some programming languages hav many number types - floa, int, etc.
    - âœ… in typescript ( as well as javascript ) numbers are just numbers.
    - âœ… numbers can be typed with a simple type annotation of number ( all lowercase ).

ðŸš©ðŸš©ðŸš©ðŸš©
    //Declaring a number variable
    let myNumber: number = 42;

    //cant reassign to a different types
    myNumber = "i am a string";

    //can reassign to a variable of same type
    myNumber = 60;
âš¡âš¡âš¡âš¡

    - âœ… boolean variable represent simple true or false values.
    - âœ… booleans can be typed with a simple type annotation of boolean (all lowercase).

ðŸš©ðŸš©ðŸš©ðŸš©
    //Declaring a boolean variable
    const myBoolean: boolean = true;

    //Cant reassign to a different type
    myBoolean = 87;

    //can reassign to a value of same type
    myBoolean = false;
âš¡âš¡âš¡âš¡

# --------------------------------------------------- 13. Compiling TypeScript #

    - âœ… first step: we create our typescript file and write all the typescript code in there.
    - âœ… second step: open the integrated terminal and run the command "tsc file_name.ts".
    - âœ… error check step: after compilation if any errors it will be displayed in the terminal and most of the time the vs code itself complain about the error before compilation.
    - âœ… even though the error occrured while compilation typescript will forecefully create a output js file for us.

# --------------------------------------------------------- 14. Type Inference #

    - âœ… Type Inference refers to the typescript compiler's ability to infer types from certain values in our code.
    - âœ… TypeScript can remember a value's type even if you didnt provide a type annotation, and it will enforce that type moving forward.

ðŸš©ðŸš©ðŸš©ðŸš©
    //creating a variable with a value
    //but without a type annotation
    let x = 27;
    
    //ERROR - type 'string' is not assignable
    //to type 'number'
    x = 'twenty-seven';
âš¡âš¡âš¡âš¡

# ----------------------------------------------------------- 15. The Any Type #

    - âœ… 'any' is an escape hatch.
    - âœ… it turns off type checking for this variable so you can do your thing.
    - âœ… NOTE: it sort of defeats the purpose of TS and types, so use it spaingly.
    
ðŸš©ðŸš©ðŸš©ðŸš©
    //Declaring a variable with type 'any'
    const myComplicatedData: any = 'i am going to be complicated';

    //can reassign to any type
    //type checks are off for this var newWords
    myComplicatedData = 87;
    myComplicatedData = 'abls';
    myComplicatedData = true;
âš¡âš¡âš¡âš¡

# ---------------------------------- 16. Delayed Initialization & Implicit Any #
# ----------------------------------------------------- Quiz 2: Inference Quiz #
