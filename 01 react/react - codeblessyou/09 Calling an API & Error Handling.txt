# ------------------------- USEEFFECT HOOK IN DETAIL ------------------------- #
âœ… 1. it is used to peform side effects in our components.
âœ… 2. side effects are actions which are performed with the 'outside world'.
ðŸš©ðŸš©ðŸš©ðŸš©
    fetching data from api,
    accesing local storage,
    directly updating dom,
    timer functios (setTimeout - setInterval)
âš¡âš¡âš¡âš¡


âœ… 3. useEffect(()=>{}); [this code will run everytime when app gets the mount and re-render happens]
âœ… 4. useEffect(()=>{},[]); [this code will run only once when the app gets mounted]
âœ… 5. useEffect(()=>{},[dependencies]); [this code will run everytime when app gets mounted and when dependencies changes]

# ------------------------ USEEFFECT CLEANUP FUNCTION ------------------------ #
âœ… 1. when we use 

# ------------------------------- HTTP REQUESTS ------------------------------ #

âœ… get    - used to fetching data from server.
âœ… post   - used to sumbit data to server.
âœ… put    - used to replace data at server.
âœ… patch  - used to update specific data at server.
âœ… delete - used to delete data from server.

# ------------------------------ NEED FOR AXIOS ------------------------------ #
âœ… 1. in react backend comminication is achived using HTTP protocol.
âœ… 2. fetch api in js is also used but axios was prefered by most of the developers.
âœ… 3. because axios has much aditional features.
âœ… 4. it can be used in both client-side and server-side(node.js) HTTP requests.

# ------------------------- FETCHING DATA WITH AXIOS ------------------------- #
âœ… 1. we need to install axios in our app.
ðŸš©ðŸš©ðŸš©ðŸš©
    npm install axios
âš¡âš¡âš¡âš¡


âœ… 2. then import it in our component.
ðŸš©ðŸš©ðŸš©ðŸš©
    import axios from 'axios';
âš¡âš¡âš¡âš¡


âœ… 3. axios has get method which is used to fetch data from server.
ðŸš©ðŸš©ðŸš©ðŸš©
    axios.get('url')
âš¡âš¡âš¡âš¡


âœ… 4. this code will return a promise, we can handle it using (then) or (async/await).
ðŸš©ðŸš©ðŸš©ðŸš©
    .then((res)=>{console.log(res)});
âš¡âš¡âš¡âš¡


âœ… 5. always console log the response(res) to view the structure of the json.
âœ… 6. this helps how the data was binded in the json.
âœ… 7. you can check the network->fetch/xhr in the inspect page.
âœ… 8. this will show the status of our axios method.
âœ… 9. 200 is the status success message.
âœ… 10. every http requests & response is divided into two sections.
âœ… 11. HEADER - here we define meta data.
âœ… 12. BODY - here we define or get data.
âœ… 13. we can use the axios response value to a state in our component.
ðŸš©ðŸš©ðŸš©ðŸš©
    .then((res)=> setMethod(res.data));
âš¡âš¡âš¡âš¡


âœ… 14. in fetch method we need a additional line to convert into json format.
ðŸš©ðŸš©ðŸš©ðŸš©
    .then((res)=> res.json())
    .then((data)=> setMethod(data.results));
âš¡âš¡âš¡âš¡


âœ… 15. so using axios we can avoid this line of converting into json.

# ---------------------------- LOADING INDICATORS ---------------------------- #
âœ… 1. create state named isLoading.
âœ… 2. this state is going to handle loading indicator.
âœ… 3. this helps us to show the end users that the data are loading behind.
âœ… 4. first we need to set false in isLoading.
âœ… 5. inside useEffect set false before api call.
âœ… 6. after api call set true.
âœ… 7. now use this state to conditionally reder with && operator and ternary operator.
âœ… 8. sometimes we cannot abe to see the loading indicators because we have high speed internet.
âœ… 9. we can reduce the inter speed in our brouser using inspect mode.
âœ… 10. goto network tab and change no throttling to slow 3g.
âœ… 11. this will reduce the internet speed.
âœ… 12. always use loading indicators(any spiner animation) with easy animation class given in tailwind.

# ------------------------------ HANDLING ERRORS ----------------------------- #
âœ… 1. when we are working in promises, we can use catch method for error handling.
âœ… 2. after then method, at the end we need to use catch method.
âœ… 3. create a state variable for error messages.
âœ… 4. based on this message we can create custom error page that will be displayed to the users.
ðŸš©ðŸš©ðŸš©ðŸš©
    .then((res)=>{...})
    .catch((err)=>{
        setIsLoading(false); // for removing loading indicators
        setErrors(err.message);
    });
âš¡âš¡âš¡âš¡


âœ… 5. prefered method by users due to less code and maintainability.

# --------------------- HANDLING PROMISE WITH ASYNC AWAIT -------------------- #
âœ… 1. for fetching api data, we can use a seperate async function.
âœ… 2. inside useEffect call that fetchAPI function.
âœ… 3. while using async function, use a try/catch to handle errors.
ðŸš©ðŸš©ðŸš©ðŸš©
    const fetchAPI = async ()=>{
        setIsLoading(true);
        try{
            const res = await axios.get('url');
            setState(res.data);
            setIsLoading(false);
        }catch (err) {
            setIsLoading(false);
            setErrorState(err.message);
        }
    };
âš¡âš¡âš¡âš¡


âœ… 4. this method should be called inside useEffect.

# ----------------------- 2 WAYS TO WORK WITH API DATA ----------------------- #
âœ… 1. optimistic method
ðŸš©ðŸš©ðŸš©ðŸš©
    update data on UI -> call API to update data at backend
âš¡âš¡âš¡âš¡


âœ… 2. pessimistic method
ðŸš©ðŸš©ðŸš©ðŸš©
    call API to update data at backend -> update data on UI
âš¡âš¡âš¡âš¡


âœ… 3. all modern wbsite use optimistic method because the ui path should be updated immediatly when user clicked.
âœ… 4. in social media if we hit a like button it must be display immediatly.
âœ… 5. pessimistic method will take some time to update data on UI.

# -------------------------- API FOR ADDING NEW DATA ------------------------- #
âœ… 1. we need to use axios post method to add data to the server.
âœ… 2. status code for successfully created data is 201.
âœ… 3. while adding new data to api, never forget to add id information.
âœ… 4. this will help us to use it at map function.
âœ… 5. this allow us to identify difference between 
ðŸš©ðŸš©ðŸš©ðŸš©
    axios.post('API url', newSellers)
    .then(res => setSellers([res.data, ...sellers]))
âš¡âš¡âš¡âš¡


âœ… 6. sometimes error will come so it can be handled using catch method or by using try/catch block.
âœ… 7. jsonplaceholder websites allow total of 11 count so after 11 it will show error regarding 'id'.

# ------------------------------ DELETING SELLER ----------------------------- #
âœ… 1. to delete a seller we can use a handle delete seller function.
âœ… 2. we need to pass seller id to the handle function, so use a arrow function to pass data.
âœ… 3. after using filter method set that filtered data to the sellers.
âœ… 4. then update the server about the deleted seller using delete() method.
âœ… 5. if any error occurs catch them.
ðŸš©ðŸš©ðŸš©ðŸš©
    const deleteSellers = (id) => {
        setSellers(sellers.filter((s) => s.id !== id));
        axios.delete('apiurl/${id}')
        .catch((err) => {
            setErrors(err.message);
            setSellers(sellers);
        });
    };
âš¡âš¡âš¡âš¡


âœ… 6. status 200 will show that it has been successfully deleted.

# -------------------------- UPDATING SELLER DETAILS ------------------------- #
âœ… 1. create a handleUpdate function with seller details as argument.
âœ… 2. so use arrow function for onClick.
âœ… 3. as we know axios patch() method is used to update specific data in server.
âœ… 4. first update the values in a new object using spread operator.
âœ… 5. second map the sellers array and use ternary operator to conditionally check if the id matches.
âœ… 6. if id matches return updated seller object.
âœ… 7. if id not matched return same seller object.
ðŸš©ðŸš©ðŸš©ðŸš©
    const handleUpdate = (seller) => {
        const updatedSeller = {
            ...seller, name: seller.name + "updated text",
        };
        setSellers(
            sellers.map((s) => (s.id === seller.id ? updatedSeller : s))
        );
        axios.patch('APIurl/${seller.id}', updatedSeller)
        .catch(err) => {
            setErrors(err.message)
        };
    }
âš¡âš¡âš¡âš¡


# ------------------ MAKING AXIOS VARIABLE FOR HTTP REQUEST ------------------ #
âœ… 1. axios allow us to create a base url.
âœ… 2. this helps us to shortern the API url link.
âœ… 3. in the source folder create a sub folder named utils.
âœ… 4. inside utils create a file named 'api-client.js'.
âœ… 5. this help us make http request using axios.
âœ… 6. inside the file, use this code.
ðŸš©ðŸš©ðŸš©ðŸš©
    import axios from "axios";
    export default axios.create({
        baseURL : "http://jsonplaceholder.typicode.com",
    })
âš¡âš¡âš¡âš¡


âœ… 7. instead of importing axios in our component, import apiClient.
ðŸš©ðŸš©ðŸš©ðŸš©
    import apiClient from '../../utils/api-client';
âš¡âš¡âš¡âš¡


âœ… 8. replace 'axios' with 'apiClient'.
âœ… 9. finnaly remove the baseURL in all api method -get,post,delete,patch.
âœ… 10. after this process app will run the same way before.
