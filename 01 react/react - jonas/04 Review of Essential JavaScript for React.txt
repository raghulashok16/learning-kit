18. Destructuring Objects and Arrays
19. Rest/Spread Operator
20. Template Literals
21. Ternaries Instead of if/else Statements
22. Arrow Functions
23. Short-Circuiting And Logical Operators: &&, ||, ??
24. Optional Chaining
25. The Array map Method
26. The Array filter Method
27. The Array reduce Method
28. The Array sort Method
29. Working With Immutable Arrays
30. Asynchronous JavaScript: Promises
31. Asynchronous JavaScript: Async/Await 

# --------------------------------------- 18. Destructuring Objects and Arrays #
âœ… 1. destructuring allow us to access single or multiple values in a single line.
ðŸš©ðŸš©ðŸš©ðŸš©
    const {title, author} = bookObject;
âš¡âš¡âš¡âš¡


âœ… 2. the name we use to destruct must be same as the key name in the object.
âœ… 3. this is very helpfull when we work with api.
âœ… 4. for array destructuring, we can use the same way but we should use a square bracket instead of cury braces.
ðŸš©ðŸš©ðŸš©ðŸš©
    const [firstElement, SecondElement, ThirdElement] = ourArray;
âš¡âš¡âš¡âš¡

# --------------------------------------------------- 19. Rest/Spread Operator #
âœ… 1. rest operator is used to store the remaining values into our required operation.
âœ… 2. in array destructuring we can use rest operator to store excess element in a array.
ðŸš©ðŸš©ðŸš©ðŸš©
    const [firstElement, ...otherElements] = ourArray;
âš¡âš¡âš¡âš¡


âœ… 3. in array destructuring it is mandatory to use rest operator at end.
âœ… 4. if we destruct a element after rest operator it will result in a error.
âœ… 5. the main use of spread operator is to get all the value out of a array/object.
ðŸš©ðŸš©ðŸš©ðŸš©
    const ourArray = [...arr1, ...arr2];
âš¡âš¡âš¡âš¡


âœ… 6. the above code is used to create a new array without affecting the original array.
ðŸš©ðŸš©ðŸš©ðŸš©
    const ourArray = [...arr1, 'newElement'];
âš¡âš¡âš¡âš¡


âœ… 7. in this example we can create a new array by adding a aditional string element at the end.
âœ… 8. same is used to create an object.
ðŸš©ðŸš©ðŸš©ðŸš©
    const newObj = {
        ...oldObj,
        pages:1210,
        author:'raghul ashok',
    };
âš¡âš¡âš¡âš¡


âœ… 9. the above code will create a new object without affecting the original oldObj.
âœ… 10. the additional properties will be overwritten in the newObj.
âœ… 11. to override an existing property always use spread operator at the begining.

# ------------------------------------------------------ 20. Template Literals #
âœ… 1. it was introduced in es6.
âœ… 2. it mainly used to use js expressions inside strings.
ðŸš©ðŸš©ðŸš©ðŸš©
    const summary = `${title} ia a book with ${5+6} pages`;
    const letters = `${author.split('-')}`;
âš¡âš¡âš¡âš¡

# -------------------------------- 21. Ternaries Instead of if/else Statements #
âœ… 1. it is a special operator with three operands.
ðŸš©ðŸš©ðŸš©ðŸš©
    pages>1000 ? 'over a thousand' : 'less than thousand';
    const result = `rammin got ${marks>49 ? 'pass' : 'fail'} marks`;
âš¡âš¡âš¡âš¡

# -------------------------------------------------------- 22. Arrow Functions #
âœ… 1. it is a new way of writing functions in javascript.
âœ… 2. it was introduced in es6.
âœ… 3. it is also called one liner function.

# --------------------- 23. Short-Circuiting And Logical Operators: &&, ||, ?? #
âœ… 1. in the short circuiting with &&, if the first value is true then the second value will run, if first value is false then the second value will not run.
âœ… 2. in the short circuiting with ||,if first value is true then the second value will not run, if the first value is false then the second value will run.
âœ… 3. but when we use nullish coalescing operator, if the first value is null/undefined then the second value will run.

# ------------------------------------------------------ 24. Optional Chaining #
âœ… 1. sometimes we face a error 'cannot read properties of undefined'.
âœ… 2. this occurs mostly in accessing obect key which was not there.
ðŸš©ðŸš©ðŸš©ðŸš©
    const bookReview = book.reviews.libraryyhing?.reviews;
    const bookReview = book.reviews?.libraryyhing?.reviews ?? 0;
âš¡âš¡âš¡âš¡


âœ… 3. (?.) - is the optional chanining symbol.
âœ… 4. by using optional chanining we can set default value because js will throw error if we try to read undefined.

# --------------------------------------------------- 25. The Array map Method #
âœ… 1. these method do not mutate the original array.
âœ… 2. basically a map method will loop through all the element in the array and returs the same length with some operation applied.
ðŸš©ðŸš©ðŸš©ðŸš©
    const x = [1,2,3,4,5].map((el) => el*2);
âš¡âš¡âš¡âš¡

# ------------------------------------------------ 26. The Array filter Method #
âœ… 1. it is used to filter out elements based on the conditions we apply.
ðŸš©ðŸš©ðŸš©ðŸš©
    const x = [1,2,3,4,5,6].filter((el) => el%2===0);
    const indianBooks = books.filter((book) => book.contry ==='india' );
âš¡âš¡âš¡âš¡


âœ… 2. we chain multiple filter methods.
ðŸš©ðŸš©ðŸš©ðŸš©
    const x = [1,2,3,4,5,6].filter((el) => el%2 === 0).filter((el) => el%3 === 0);
âš¡âš¡âš¡âš¡

# ------------------------------------------------ 27. The Array reduce Method #
âœ… 1. reduce method is the most versatile and most powerfull method in js.
âœ… 2. the goal of the reduce method is to reduce to a single value output.
âœ… 3. reduce method has 2 things a function and a starting value.
âœ… 4. that function has 2 things accumulator and a working array value.
ðŸš©ðŸš©ðŸš©ðŸš©
    const pagesAllBooks = books.reduce((acc,book)=>acc+book.pages,0);
âš¡âš¡âš¡âš¡

# -------------------------------------------------- 28. The Array sort Method #
âœ… 1. to sort a array in ascending way use a-b;
ðŸš©ðŸš©ðŸš©ðŸš©
    const sorted = arr.sort((a,b) => a-b);
âš¡âš¡âš¡âš¡


âœ… 2. to sort a array in descending way use b-a;
ðŸš©ðŸš©ðŸš©ðŸš©
    const sorted = arr.sort((a,b) => b-a);
âš¡âš¡âš¡âš¡


âœ… 3. while using array sort method use it caustious, because it mutates the original array.
âœ… 4. in react we need this sort method in most times.
âœ… 5. so there is a solution for that using slice().
ðŸš©ðŸš©ðŸš©ðŸš©
    const sorted = arr.slice().sort((a,b) => a-b);
âš¡âš¡âš¡âš¡


âœ… 6. with this method we can still work without affecting the original array.
âœ… 7. this same method is used for sorting objects using any key.
ðŸš©ðŸš©ðŸš©ðŸš©
    const sorted = arr.slice().sort((a,b) => a.pages-b.pages);
âš¡âš¡âš¡âš¡


âœ… 8. here we have to mention the correct key name of property or else it wont work.
âœ… 9. finally we can do both ascending and descending sort with both object and array.

# ------------------------------------------ 29. Working With Immutable Arrays #
âœ… 1. add book object to end of the array.
ðŸš©ðŸš©ðŸš©ðŸš©
    const newBook = {
        id: 6,
        author: 'kim',
    };
    const booksAfterAdd = [...books, newBook];
âš¡âš¡âš¡âš¡


âœ… 2. delete book object from array having id 3.
ðŸš©ðŸš©ðŸš©ðŸš©
    const booksAfterDelete = books.filter((book) => book.id !== 3);
âš¡âš¡âš¡âš¡


âœ… 3. update book page number to 1201 in object which has id = 1 in the array.
ðŸš©ðŸš©ðŸš©ðŸš©
    const bookAfterUpdate = books.map((book) => book.id === 1 ? { ...book, pages: 1201 } : book);
âš¡âš¡âš¡âš¡

# -------------------------------------- 30. Asynchronous JavaScript: Promises #
âœ… 1. in order to fetch data from an api in the browser we have a method called fetch API.
âœ… 2. it is a function into which we pass a url of an api.
âœ… 3. to test the fetch method use a dummy api.
âœ… 4. json placeholder is a dummy api website availabe.
âœ… 5. fetch method basically returns a promise.
âœ… 6. promise can be anything like - pending,error,fullfiled,etc.
âœ… 7. we can add .then() to work with that promise.
âœ… 8. then() will be automatically called as soon the promise fullfiled status.
ðŸš©ðŸš©ðŸš©ðŸš©
    fetch('api url')
    .then((res) => res.json())
    .then((data) => console.log(data));
âš¡âš¡âš¡âš¡


âœ… 9. res is the response from the api which needs to be converted.
âœ… 10. data is the converted format which we use in the react applications.

# ----------------------------------- 31. Asynchronous JavaScript: Async/Await #
âœ… 1. this is another method to fetch data from api url.
ðŸš©ðŸš©ðŸš©ðŸš©
    async function getData() {
        const res = await fetch('api url');
        const data = await res.json();
        console.log(data);
    }
âš¡âš¡âš¡âš¡


âœ… 2. avoid returns from async function beacuse javascript wont wait in normal function.
âœ… 3. so for that purpose async functions was introduced just to set state variable for component.
