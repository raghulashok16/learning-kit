# ------------ Section 5: Working With Components, Props, and JSX ------------ #
33. Rendering the Root Component and Strict Mode
34. Before We Start Coding: Debugging
35. Components as Building Blocks
36. Creating And Reusing a Component
37. What is JSX?
38. Creating More Components
39. JavaScript Logic in Components
40. Separation of Concerns
41. Styling React Applications
42. Passing and Receiving Props
43. Props, Immutability, and One-Way Data Flow
44. CHALLENGE #1: Profile Card (v1)
45. The Rules of JSX
46. Rendering Lists
47. Conditional Rendering With &&
48. Conditional Rendering With Ternaries
49. Conditional Rendering With Multiple Returns
50. Extracting JSX Into a New Component
51. Destructuring Props
52. React Fragments
53. Setting Classes and Text Conditionally
54. Section Summary
55. CHALLENGE #2: Profile Card (v2)

# ------------- 33. Rendering the Root Component and Strict Mode ------------- #
âœ… 1. delete all files in src folder.
âœ… 2. create index.js, it is the entry point.
ðŸš©ðŸš©ðŸš©ðŸš©
    import React from 'react';
    import ReactDom from 'react-dom/client';
âš¡âš¡âš¡âš¡


âœ… 3. now create a function app.
ðŸš©ðŸš©ðŸš©ðŸš©
    function App() {
        return <h1>Hello Raghul</h1>;
    }
âš¡âš¡âš¡âš¡


âœ… 4. now create the root.
ðŸš©ðŸš©ðŸš©ðŸš©
    const root = ReactDom.createRoot(document.getElementById("root"));
âš¡âš¡âš¡âš¡


âœ… 5. finally render the app component with root which we created now.
ðŸš©ðŸš©ðŸš©ðŸš©
    root.render(<App/>);
âš¡âš¡âš¡âš¡


âœ… 6. this method is react v18 and before 18 render was different.

Strict Mode:
âœ… 1. wrapping app component inside react.strictmode component.
ðŸš©ðŸš©ðŸš©ðŸš©
    root.render(
        <React.StrictMode>
            <App/>
        </React.StrictMode>
    );
âš¡âš¡âš¡âš¡


âœ… 2. it will render twice while development.
âœ… 3. it will check if there are any outdated parts of the React API.
âœ… 4. it is a good practise to use strict mode in development process because it will help us find bugs.


# ------------------- 34. Before We Start Coding: Debugging ------------------ #
âœ… 1. if our changes did not reflect in browser, then check if our app is running, if not we can stop and restart the app again, you can also hard reload the browser.
âœ… 2. always check on the terminal and inpect window open in all time.
âœ… 3. Eslint will warn about the unused variables as warnings.

# --------------------- 35. Components as Building Blocks -------------------- #
âœ… 1 .components are the fundamental parts of react.
âœ… 2. react applications are entirely made out of components.
âœ… 3. these are building blocks of user interfaces in react.
âœ… 4. basically react takes all components and draw them onto a webpage.
âœ… 5. in technical terms, react renders a view for each component, ald all these views together make up the user interface.
âœ… 6. component is piece of ui that has its own data, logic and appearance.
âœ… 7. in react we build complex ui by building multiple components and combining them.
âœ… 8. components can be reused, nested inside each other, and pass data between them.

# ------------------- 36. Creating And Reusing a Component ------------------- #
âœ…  1. in react we write components using functions and it is called functional components.
ðŸš©ðŸš©ðŸš©ðŸš©
    function Pizza () {
        return (
            <h2>pizza</h2>
        );
    }
âš¡âš¡âš¡âš¡


âœ… 2. rules: 
    -- function name should start with capital letter.
    -- function needs to return some markups.
    -- each function should return one single parent element.
    -- multiple child element are not allowed to return from the functional component.
    -- nesting components will work but not recomended.
ðŸš©ðŸš©ðŸš©ðŸš©
    function App () {
        function Pizza () {
            return (
                <h2>pizza</h2>
            );
        }
        return (
            <div>
                <p>today special</p>
                <Pizza/>
            </div>
        );
    }
âš¡âš¡âš¡âš¡
    -- the above code will work but not recomended by develpers.


âœ… 3. after creating the functional component add the component name as element as shown below.
ðŸš©ðŸš©ðŸš©ðŸš©
    function App () {
        return (
            <div>
                <p>today special</p>
                <Pizza/>
            </div>
        );
    }
âš¡âš¡âš¡âš¡


# ----------------------------- 37. What is JSX? ----------------------------- #
âœ… 1. JSX is a declarative syntax to describe what components look like and how they work.
âœ… 2. so each component must return one block of JSX, which react will ten use to render the component on the ui.
âœ… 3. JSX is the extension of javascript that allows us to embed javascript, css and react components into HTML.
âœ… 4. babel is a tool which is included when we create a react app and this tool automatically converts our JSX into javascript.
âœ… 5. each JSX element is connverted automatically to a React.createElement function call like the below.
ðŸš©ðŸš©ðŸš©ðŸš©
    <header>
        <h1 style= "color: red">
            Hello React!
        </h1>
    </header>

    React.createElement(
        'header',
        null,
        React.createElement(
            'h1',
            { style: { color: 'red' } },
            'Hello React!',
        )
    );
âš¡âš¡âš¡âš¡


âœ… 6. when we try to build UI using vanilla javascript, we will use a imperative approach.
âœ… 7. this means that we manually select elements, 

# ----------------------- 38. Creating More Components ----------------------- #
# -------------------- 39. JavaScript Logic in Components -------------------- #
# ------------------------ 40. Separation of Concerns ------------------------ #
# ---------------------- 41. Styling React Applications ---------------------- #
# ---------------------- 42. Passing and Receiving Props --------------------- #
# -------------- 43. Props, Immutability, and One-Way Data Flow -------------- #
# -------------------- 44. CHALLENGE 1: Profile Card (v1) -------------------- #
# --------------------------- 45. The Rules of JSX --------------------------- #
# ---------------------------- 46. Rendering Lists --------------------------- #
# --------------------- 47. Conditional Rendering With && -------------------- #
# ----------------- 48. Conditional Rendering With Ternaries ----------------- #
# -------------- 49. Conditional Rendering With Multiple Returns ------------- #
# ------------------ 50. Extracting JSX Into a New Component ----------------- #
# -------------------------- 51. Destructuring Props ------------------------- #
# ---------------------------- 52. React Fragments --------------------------- #
# ---------------- 53. Setting Classes and Text Conditionally ---------------- #
# ---------------------------- 54. Section Summary --------------------------- #
# -------------------- 55. CHALLENGE 2: Profile Card (v2) -------------------- #