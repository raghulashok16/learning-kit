11. Intro to useEffect Hook
12. Basic Example of useEffect Hook
13. Example 2 - Simple Counter
14. Example 3 - Changes from State
15. Gotchas with useEffect
16. More Gotchas with useEffect
17. And More Gotchas with useEffect
18. Even More Gotchas with useEffect
19. Example 4 - Resizing Windows
20. Example 5 - Polling API
21. Example 6 - Sync Local Storage
22. Example 7 - Fetch Data on Prop Change
23. Example 8 - Conditions in useEffect
24. Example 9 - User Profile
25. Example 10 - Conditional UseEffect
26. Example 11 - Pagination


# ------------------------ 11. Intro to useEffect Hook ----------------------- #

import React, { useEffect } from 'react';

function App() {
    useEffect(() => {
        console.log('Component has been rendered!');
    });

    return <div>Hello, world!</div>;
}

export default App;

# -------------------- 12. Basic Example of useEffect Hook ------------------- #

import React from "react";
import { useState, useEffect } from "react";

function App() {
	const [data, setData] = useState(null);

	useEffect(() => {
		fetch("https://jsonplaceholder.typicode.com/todos/")
		.then((response) => response.json())
		.then((data) => setData(data))
		.catch((error) => console.error("error fetching data:", error));
	}, []);

	return (
		<div>
		{data ? <pre>{JSON.stringify(data, null, 2)}</pre> : <p>Loading...</p>}
		</div>
	);
}

export default App;

# ---------------------- 13. Example 2 - Simple Counter ---------------------- #

import React, { useState, useEffect } from 'react';

function App() {
    const [count, setCount] = useState(0);

    useEffect(() => {
        const timer = setInterval(() => {
            setCount(prevCount => prevCount + 1);
        }, 1000);

        // Cleanup function to clear the timer
        return () => clearInterval(timer);
    }, []); // Empty dependency array means this effect runs once

    return <div>Count: {count}</div>;
}

export default App;

# -------------------- 14. Example 3 - Changes from State -------------------- #

import React, { useState, useEffect } from 'react';

function App() {
    const [count, setCount] = useState(0);

    useEffect(() => {
        document.title = `Count: ${count}`;
    }, [count]); // Effect runs whenever "count" changes

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
    );
}

export default App;

# ------------------------ 15. Gotchas with useEffect ------------------------ #
# ---------------------- 16. More Gotchas with useEffect --------------------- #
# -------------------- 17. And More Gotchas with useEffect ------------------- #
# ------------------- 18. Even More Gotchas with useEffect ------------------- #
# --------------------- 19. Example 4 - Resizing Windows --------------------- #

import React, { useState, useEffect } from 'react';

function App() {
    const [windowSize, setWindowSize] = useState({
        width: window.innerWidth,
        height: window.innerHeight,
    });

    useEffect(() => {
        function handleResize() {
            setWindowSize({
                width: window.innerWidth,
                height: window.innerHeight,
            });
        }

        window.addEventListener('resize', handleResize);

        // Cleanup the event listener when the component unmounts
        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, []); // Empty dependency array ensures this effect runs only once when the component mounts

    return (
        <div>
            <h2>Window Size</h2>
            <p>Width: {windowSize.width}px</p>
            <p>Height: {windowSize.height}px</p>
        </div>
    );
}

export default App;

# ------------------------ 20. Example 5 - Polling API ----------------------- #

import React, { useState, useEffect } from 'react';

function App() {
    const [data, setData] = useState(null);
    const [error, setError] = useState(null);

    useEffect(() => {
        const interval = setInterval(() => {
            fetch('https://api.example.com/data')
                .then((response) => response.json())
                .then((data) => setData(data))
                .catch((err) => setError(err));
        }, 5000); // Polling every 5 seconds

        // Cleanup function to clear the interval when the component unmounts
        return () => clearInterval(interval);
    }, []); // Runs only once when the component mounts

    return (
        <div>
            {error && <p>Error fetching data: {error.message}</p>}
            {data ? (
                <pre>{JSON.stringify(data, null, 2)}</pre>
            ) : (
                <p>Loading...</p>
            )}
        </div>
    );
}

export default App;

# -------------------- 21. Example 6 - Sync Local Storage -------------------- #

import React, { useState, useEffect } from 'react';

function App() {
    const [name, setName] = useState(() => {
        // Initialize state with data from localStorage
        return localStorage.getItem('name') || '';
    });

    useEffect(() => {
        // Sync state with localStorage whenever 'name' changes
        localStorage.setItem('name', name);
    }, [name]); // Dependency on 'name' ensures this effect runs whenever 'name' changes

    return (
        <div>
            <h2>Enter your name:</h2>
            <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
            />
            <p>Your name is: {name}</p>
        </div>
    );
}

export default App;

# ----------------- 22. Example 7 - Fetch Data on Prop Change ---------------- #

import React, { useState, useEffect } from 'react';

function App({ userId }) {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        setLoading(true);
        setError(null);

        fetch(`https://api.example.com/users/${userId}`)
            .then((response) => response.json())
            .then((data) => {
                setUser(data);
                setLoading(false);
            })
            .catch((err) => {
                setError(err);
                setLoading(false);
            });
    }, [userId]); // Runs whenever 'userId' prop changes

    if (loading) {
        return <p>Loading...</p>;
    }

    if (error) {
        return <p>Error: {error.message}</p>;
    }

    return (
        <div>
            <h2>{user.name}</h2>
            <p>Email: {user.email}</p>
        </div>
    );
}

export default App;

# ------------------ 23. Example 8 - Conditions in useEffect ----------------- #

import React, { useState, useEffect } from 'react';

function App() {
    const [count, setCount] = useState(0);
    const [message, setMessage] = useState('');

    useEffect(() => {
        if (count > 5) {
            setMessage('Count is greater than 5!');
        } else {
            setMessage('');
        }
    }, [count]); // Runs whenever 'count' changes

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>Increment</button>
            {message && <p>{message}</p>}
        </div>
    );
}

export default App;

# ----------------------- 24. Example 9 - User Profile ----------------------- #

import React, { useState, useEffect } from 'react';

function UserProfile({ userId }) {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        setLoading(true);
        setError(null);

        fetch(`https://api.example.com/users/${userId}`)
            .then((response) => response.json())
            .then((data) => {
                setUser(data);
                setLoading(false);
            })
            .catch((err) => {
                setError(err);
                setLoading(false);
            });
    }, [userId]); // Runs whenever 'userId' prop changes

    if (loading) {
        return <p>Loading...</p>;
    }

    if (error) {
        return <p>Error: {error.message}</p>;
    }

    return (
        <div>
            <h2>{user.name}</h2>
            <p>Email: {user.email}</p>
        </div>
    );
}

export default UserProfile;

# ------------------ 25. Example 10 - Conditional UseEffect ------------------ #

import React, { useState, useEffect } from 'react';

function CountdownTimer({ initialCount }) {
    const [count, setCount] = useState(initialCount);

    useEffect(() => {
        if (count === 0) return;

        const timer = setTimeout(() => {
            setCount(count - 1);
        }, 1000);

        // Cleanup the timer when the component unmounts or when 'count' changes
        return () => clearTimeout(timer);
    }, [count]); // Runs every time 'count' changes

    return (
        <div>
            <h2>Countdown: {count}</h2>
            {count === 0 && <p>Time's up!</p>}
        </div>
    );
}

export default CountdownTimer;

--

import CountdownTimer from "./Countdown";

function App() {
	return (
		<CountdownTimer initialCount={10} />
	)
}

export default App;
# ------------------------ 26. Example 11 - Pagination ----------------------- #

import React, { useState, useEffect } from 'react';

function App() {
    const [page, setPage] = useState(1);
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        setLoading(true);
        setError(null);

        fetch(`https://api.example.com/data?page=${page}`)
            .then((response) => response.json())
            .then((data) => {
                setData(data.items);
                setLoading(false);
            })
            .catch((err) => {
                setError(err);
                setLoading(false);
            });
    }, [page]); // Fetch data whenever the page changes

    return (
        <div>
            <h2>Page {page}</h2>
            {loading ? (
                <p>Loading...</p>
            ) : error ? (
                <p>Error: {error.message}</p>
            ) : (
                <ul>
                    {data.map((item) => (
                        <li key={item.id}>{item.name}</li>
                    ))}
                </ul>
            )}
            <button onClick={() => setPage(page + 1)}>Next Page</button>
        </div>
    );
}

export default App;
