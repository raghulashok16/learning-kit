# -------------------------------- what is css ------------------------------- #
1. css - cascading style sheet.
2. it make our webpage look good.
3. usualy webpage consist html.
4. html shows content on your page.
5. so there are no webpage without html.
6. on the otherhand css allow us to style the html content.
7. it allow us to add colors, shadows, visual effects, etc.
8. css will change our boring html pages into good looking webpage.

# ----------------------- css history, present & future ---------------------- #
1. it was introduced in 1996, refered as css 1.
2. in 1998, css2 was introduced.
3. still css3 is in development.
4. and no css4 will be there.
5. instead of creating new versions css was sub divided into independent modules.
6. modules on text, modules on color, modules on shadows, etc.

# ---------------------- 3 different ways of adding css ---------------------- #
1. using inline styling.

    <p style="color:red">helo css</p>

2. using style tag.

    <style>
        p{
            color:red;
        }
    </style>

3. using external css file.[create a file name 'main.css'][inside this file write the css code]

    <link rel="stylesheet" href="main.css">

# -------------------------------- font color -------------------------------- #
1. to change a font color use 'color' property.

    color: white;

# ---------------------------- changing font style --------------------------- #
1. to change font style use 'font-family' property.

    font-family: sans-serif;

2. there are some default fonts available in our browser.
3. open your browser setting and you change the default and other fonts.

# ------------------------------- google fonts ------------------------------- #
1. goto google fonts website and select your prefered font.
2. copy the link tag and past above the css link tag.
3. and then we can use our selected font using 'font-family' property availabe in the website.

# --------------------------------- selectors -------------------------------- #
1. element selector.

    h1{
        color: red;
    }

2. class selector.

    .class_name{
        color: red;
    }

3. universal selector. [rarely use this one]

    *{
        color: red;
    }

4. id selector.

    #id_name{
        color: red;
    }

6. attribute selector.

    [attribute_name]{
        color: red;
    }

# ------------------------- cascading and specificity ------------------------ #
1. if try to style two times to a tag, then some style override others.
2. so multiple rules affect the css styles.
3. specificity comes to play when we use multiple rules.
4. highest priority selectors will win.
5. "cascading" in  CSS  describes the method by which the browser determines which styles to apply to a given HTML element when there are multiple, potentially conflicting, rules.
6. so specificity resolves these conflicts.
7. inline->ID->class,pseudo-class,attribute->tag,pseudo-element selectors.
8. these are the order of specificity and inline has the highest priority.

# -------------------------------- inheritance ------------------------------- #
1. some styles pass down to the child elements.
2. usualy font-family comes to the child elements.
3. this will work when we set specific font-family to the body tag.
4. so inheritance is very important when passing down styles to the child elements.

# -------------------------------- combinators ------------------------------- #
1. combinator allow us to combine multiple selectors to be more precise about what we want to select.

# ---------------------------- list of combinators --------------------------- #
1. adjacent sibling [element share same parent] [second element comes immediately after first element]

    h2 + p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <h2>nope</h2>
        <h3>nope</h3>
        <p>nope</p>
        <h2>nope</h2>
        <p>css applied</p>
    </div>

2. general sibling [elements share same parent] [second element comes after first element]

    h2 ~ p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <h2>nope</h2>
        <h3>nope</h3>
        <p>css applied</p>
    </div>

3. child combinator [second element is a direct child of first element]

    div > p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <div>nope</div>
        <article>
            <p>nope</p>
        </article>
        <h3>nope</h3>
        <p>css applied</p>
    </div>

4. descendant combinator [second element is a descendant of the first element]

    div p {
        color: red;
    }

    <div>
        <h2>nope</h2>
        <p>css applied</p>
        <div>nope</div>
        <article>
            <p>css applied</p>
        </article>
        <h3>nope</h3>
        <p>css applied</p>
    </div>