# ---------------------------- JAVASCRIPT RELEASES --------------------------- #
1. in 1995 brendan eich created the first version of javascript in just 10 days.
2. this version was named mocha and it had many fundamental features of modern javascript.
3. in 1996, in order to attract java users, it was remaned to livescript and then to javascript.
4. javascript has almost nothing to do with java.
5. microsoft created internet explorer, copying javascript from netscape and named it Jscript.
6. to standadize javascript, it was submitted to European Computer Manufacturers Association (ECMA).
7. in 1997, ECMA released the official first version of javascript named ECMAScript 1 (ES1).
8. in 2009, ES5 is released with lot of good features.
9. in 2015, ES6 is released which is the biggest update to the language ever.
10. ECMAScript decided anual release policy to ship less feature per update.

# -------------- BASIC INFORMATION ABOUT JAVASCRIPT PROGRAMMING -------------- #
1. JS is backward compatible.
2. old features are not removed, so websites keepswork forever.
3. JS is not forward compatible.
4. babel tool is used to convert latest features to old ES5 compatible.
5. most of the browser support ES5.

# -------------------------------- DATA TYPES -------------------------------- #
1. 7 different data types in javascript.
2. Number - floating point numbers - used for decimals and integers.
3. String - sequence of character - used for text.
4. Boolean - logical type that can be true or false - used for taking decisions.
5. Undefined - value taken by a variable that is not defined - empty value.
6. Null - also means empty value.
7. Symbol (ES2015) - values that is unique and cannot be changed - not usefull for now.
8. BigInt (ES2020) - larger integers than Number type can hold.
9. javascript has dynamic typing.
10. we do not have to manually define the data type of the value stored in a variable.
11. instead datatypes are defined automatically.

    typeof ('javascript')
    typeof ('A')
    typeof (true)
    typeof (false)
    typeof (12)
    typeof (1.2)
    let value_1;
    [undefined means a variable has been declared but has not yet been assigned a value]
    typeof (value_1)
    let value_2 = null;
    [null is an assignment value, meaning that a variable has been declared and given the value of null]
    typeof (value_2)
    typeof (null)
    [typeof null is object and it is not corrected for leagacy reasons]

# ------------------------------- LET-CONST-VAR ------------------------------ #
1. The let and const keyword was introduced in the later version of JavaScript known as ES6(ES2015).
2. And it's the preferred way to declare variables.
3. let - block-scoped. let does not allow to redeclare variables. Hoisting does not occur in let.
4. var - function scoped. var allows to redeclare variables. Hoisting occurs in var.
5. const - declare a variable that cannot be reassigned a new value. 

# ------------------------------ VARIABLE SCOPE ------------------------------ #
1. the scope of a variable determines where it can be accessed within the code.
2. Global Scope, Local (Function) Scope, Block-Level Scope.

# --------------------------- JAVASCRIPT OPERATORS --------------------------- #
1. JavaScript operators are special symbols that perform operations on one or more operands (values).
2. an operator is a symbol or keyword that performs an operation on one or more operands, producing a result.
3. Arithmetic Operators: Used for basic arithmetic operations like addition, subtraction, multiplication, division, and modulus.
[Addition (+), Subtraction (-), Multiplication (*), Division (/), Modulus (%), Increment (++) and Decrement (--)]
4. Assignment Operators: Used to assign values to variables.
[Assignment (=), Compound Assignment (e.g., +=, -=, *=, /=, %=)]
5. Comparison Operators: Used to compare values and return a Boolean result.
[Equal to (==), Not equal to (!=), Strict equal to (===), Strict not equal to (!==), Greater than (>), Less than (<), Greater than or equal to (>=), Less than or equal to (<=)]
6. Logical Operators: Used to combine or manipulate Boolean values.
[Logical AND (&&), Logical OR (||), Logical NOT (!)]
7. Bitwise Operators: Used to perform bitwise operations on binary representations of numbers.
[Bitwise AND (&), Bitwise OR (|), Bitwise XOR (^), Bitwise NOT (~), Left Shift (<<), Right Shift (>>), Zero-fill Right Shift (>>>)]
8. Unary Operators: Operators that only require a single operand.
[Unary plus (+), Unary minus (-), Logical NOT (!)]
9. Ternary Operator (Conditional Operator): An operator that takes three operands and evaluates a Boolean expression, returning one of two values depending on whether the expression is true or false.
10. Type Operators: Used to check the data type of a value.
[typeof, instanceof]
11. Comma Operator: Allows multiple expressions to be evaluated in a single statement, returning the value of the last expression.

# ---------------------------- OPERATOR PRECEDENCE --------------------------- #
1. operators have a defined order of precedence, which determines the sequence in which they are evaluated when expressions are parsed.
2. Here's a breakdown of the order of precedence in JavaScript, from highest to lowest.
3. Grouping: ( ) - Parentheses are used to group expressions and control the order of evaluation.
4. Member Access: . - Access properties or methods of objects.
5. Computed Member Access: [ ] - Access properties or methods of objects using a computed value.
6. Function Call: ( ) - Call functions or constructors and pass arguments.
7. Postfix Increment/Decrement: ++, --
8. Logical NOT: ! 
9. Unary Plus and Minus: +, - 
10. Exponentiation: ** 
11. Multiplication, Division, Remainder: *, /, % 
12. Addition and Subtraction: +, - 
13. Relational Operators: <, <=, >, >=, instanceof
14. Equality Operators: ==, !=, ===, !== 
15. Bitwise Shift Operators: <<, >>, >>> 
16. Bitwise AND: & 
17. Bitwise XOR: ^ 
18. Bitwise OR: | 
19. Logical AND: && 
20. Logical OR: || 
21. Conditional (Ternary) Operator
22. Assignment Operators: =, +=, -=, *=, /=, etc.

# ------------------------ STRING VS TEMPLATE LITERAL ------------------------ #
1. Strings in JavaScript are sequences of characters enclosed in single quotes (') or double quotes (").
2. They are immutable, meaning once created, their value cannot be changed.
3. To include variables or expressions within a string, you need to concatenate them using the + operator or use string interpolation functions like String.prototype.concat() or String.prototype.slice().

    let carName1 = "Volvo XC60";
    [Double quotes]
    let carName2 = 'Volvo XC60';  
    [Single quotes]

# ----------------------------- TEMPLATE LITERALS ---------------------------- #
1. Template literals/ String literals were introduced in ES6.
2. Template Strings use back-ticks (``) rather than the quotes ("") to define a string
3. Template literals support string interpolation, allowing you to embed expressions or variables directly within the string using ${} syntax.
4. They support multi-line strings without the need for escape characters like \n.

NOTES: Template literals offer a more concise and readable way to create strings with variable interpolation and multiline support, making them often preferred over traditional string concatenation, especially in modern JavaScript code. However, for compatibility with older browsers or environments, traditional strings may still be used.

    `string text`
    `string text ${expression} string text`
    `string text line 1
     string text line 2`

# ------------------------------- IF STATEMENT ------------------------------- #
1. The if statement executes a block of code if a specified condition is true.

    if (condition) {
      //  block of code to be executed if the condition is true
    }

# ---------------------------------- IF ELSE --------------------------------- #
1. The if...else statement executes one block of code if a specified condition is true and another block of code if the condition is false.

    if (condition) {
      //  block of code to be executed if the condition is true
    } else {
      //  block of code to be executed if the condition is false
    }

# ---------------------------------- ELSE IF --------------------------------- #
1. The if...else if...else statement allows you to chain multiple conditions together.

    if (condition1) {
      //  block of code to be executed if condition1 is true
    } else if (condition2) {
      //  block of code to be executed if the condition1 is false and condition2 is true
    } else {
      //  block of code to be executed if the condition1 is false and condition2 is false
    }

# ----------------------------- SWITCH STATEMENT ----------------------------- #
1. The switch statement evaluates an expression.
2. Matches the expression's value to a case clause.
3. Executes the block of code associated with that case.

    switch(expression) {
      case x:
        // code block
        break;
      case y:
        // code block
        break;
      default:
        // code block
    }

# ----------------------------- TERNARY OPERATOR ----------------------------- #
1. The ternary operator evaluates a condition and returns one of two expressions based on whether the condition is true or false.

    condition ? exprIfTrue : exprIfFalse

# ------------------------------ TYPE CONVERSION ----------------------------- #
1. Type conversion explicitly converts a value from one data type to another using built-in functions or methods.
2. It occurs when a developer intentionally changes the data type of a value.
3. Type conversion typically results in a new value of the desired data type.
4. Examples of type conversion include using functions like Number(), String(), Boolean(),etc.

    let y = Number("10");
    [Explicitly convert x to a number]

    console.log(typeof y);
    [Output: number]

# ------------------------------- TYPE COERCION ------------------------------ #
1. Type coercion in JavaScript is an implicit process where values are automatically converted from one data type to another during operations.
2. It occurs when JavaScript automatically converts the data type of a value to perform an operation.
3. Type coercion can sometimes lead to unexpected results if the developer is not aware of how JavaScript handles different data types.
4. Examples of type coercion include when using operators like +, -, ==, ===, !, etc.

    let y = "10" + 5;
    [JavaScript coerces 5 into a string and performs string concatenation]

# -------------------------- TRUTHY AND FLASY VALUES ------------------------- #
1. Examples of Truthy Values:

    "hello" (a non-empty string)
    42 (a non-zero number)
    ["apple", "banana"] (a non-empty array)
    {"name": "John"} (a non-empty object)
    function() { } (a non-empty function)

2. Examples of Falsy Values:

    false
    null
    undefined
    0
    -0
    NaN
    "" (an empty string)

# ------------------------------ LOOSE EQUALITY ------------------------------ #
1. (==) compares values and returns true.
2. it won't check datatypes differences so sometimes values will be converted before comparison.
3. Type coercion in JavaScript can sometimes lead to unexpected results, so it's mostly recommended to use the strict equality operator === instead of the loose equality operator ==.

# ------------------------------ STRICT EQUALITY ----------------------------- #
1. while comparing the variables, it first checks if is same data types.
2. If the types match, then it checks for the value.
3. If the values are same, it returns true.
4. If it has different data types then it will return false.

# ----------------------------- LOGICAL OPERATOR ----------------------------- #
1. And-Or-Not 
2. these 3 play major role in condition validation.
3. if we want to check both the conditions are true, we can use '&&'.
4. if we want to check any of the conditions are true, we can use '||'.
5. if we want to check a condition is not true, we can use '!'.

# -------------------------- ACTIVATING STRICT MODE -------------------------- #
1. Strict mode in JavaScript is a way to opt into a restricted variant of JavaScript, thereby catching common coding errors and preventing potentially unsafe actions.
2.  It was introduced in ECMAScript 5 (ES5) and helps developers write more secure and robust code by changing the semantics of JavaScript execution.
3. Using strict mode can help catch common mistakes and improve the overall quality of your code by enforcing stricter parsing and error handling.
4. It is generally a good practice to use strict mode in your JavaScript projects to avoid subtle bugs and enhance the performance of your code.
5. Strict mode can be enabled in two ways:
    -- Global Strict Mode
    -- Function-level Strict Mode

# --------------------------------- FUNCTIONS -------------------------------- #
1. there are 3 types of functions in javascript.
2. (Named Functions/function declarations), (Anonymous Functions/function expressions),  (Arrow Functions).
3. function is a set of instructions that can be used repeatedly in a program.
4. In JavaScript, functions are objects that can be declared, assigned, and passed as parameters to other functions.
5. function declaration - can be used before its declared.
6. function expression - essentially a function value stored in a variable.
7. arrow function - great for one line function, this keyword won't work in arrow function.

# ---------------------- FUNCTION CALLING OTHER FUNCTION --------------------- #
1. we can call a function inside another function in javascript.
2. inside function1 we need to to call the function2().

# ----------------------------------- ARRAY ---------------------------------- #
1. An array is a special variable, which can hold more than one value.

    const array_name = [item1, item2, ...];
    const array_name = new Array(item1, item2, ...);

2. we can use different datatypes inside a array.
3. we can use a array as a value inside a array.

# ---------------------------- ARRAY METHODS --------------------------- #
1. Mutator Methods [These methods modify the array]

    push() - Adds one or more elements to the end of an array and returns the new length of the array.
    pop() - Removes the last element from an array and returns that element.
    shift() - Removes the first element from an array and returns that element.
    unshift() - Adds one or more elements to the front of an array and returns the new length of the array.
    splice() - Changes the contents of an array by removing or replacing existing elements and/or adding new elements.
    sort() - Sorts the elements of an array in place and returns the array.
    reverse() - Reverses the order of the elements in an array in place.
    copyWithin() - Shallow copies part of an array to another location in the same array and returns it, without modifying its     length.
    fill() - Fills all the elements of an array from a start index to an end index with a static value.

2. Accessor Methods [These methods do not modify the array but return some representation of the array]

    concat() - Merges two or more arrays and returns a new array.
    includes() - Determines whether an array includes a certain value among its entries, returning true or false.
    indexOf() - Returns the first index at which a given element can be found, or -1 if it is not present.
    lastIndexOf() - Returns the last index at which a given element can be found, or -1 if it is not present.
    join() - Joins all elements of an array into a string and returns this string.
    slice() - Returns a shallow copy of a portion of an array into a new array object.
    toString() - Returns a string representing the array and its elements.
    toLocaleString() - Returns a localized string representing the array and its elements.

3. Iteration Methods [These methods are used to iterate over arrays and perform some operation on each element]

    forEach() - Executes a provided function once for each array element.
    map() - Creates a new array populated with the results of calling a provided function on every element in the calling array.
    filter() - Creates a new array with all elements that pass the test implemented by the provided function.
    reduce() - Executes a reducer function on each element of the array, resulting in a single output value.
    reduceRight() - Executes a reducer function on each element of the array (from right-to-left), resulting in a single output     value.
    every() - Tests whether all elements in the array pass the test implemented by the provided function.
    some() - Tests whether at least one element in the array passes the test implemented by the provided function.
    find() - Returns the value of the first element in the array that satisfies the provided testing function.
    findIndex() - Returns the index of the first element in the array that satisfies the provided testing function.
    flat() - Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
    flatMap() - First maps each element using a mapping function, then flattens the result into a new array.
    keys() - Returns a new Array Iterator object that contains the keys for each index in the array.
    values() - Returns a new Array Iterator object that contains the values for each index in the array.
    entries() - Returns a new Array Iterator object that contains key/value pairs for each index in the array.

4. Other Methods [These methods serve miscellaneous purposes]

    from() - Creates a new, shallow-copied Array instance from an array-like or iterable object.
    isArray() - Determines whether the passed value is an array.
    of() - Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.

# ---------------------------------- OBJECTS --------------------------------- #
1. object is a versatile way to store collection of data.
2. an obeject is a collection of properties.
3. each property defined by key-value pair.

    const obj = {
        key1: value1,
        key2: value2,
        // ...
    };

# -------------------------- DOT VS BRACKET NOTATION ------------------------- #
1. to access a property in an object we can use dot notation and bracket notation.

    console.log(object.key_name);
    console.log(object['key_name']);

2. when we use bracket notation, we can set dynamic key name using unary operator.

    const newValue = 'Name';
    console.log(object['first' + newValue]);
    console.log(object['last' + newValue]);

3. dot notation dont allow us to set dynamic key.
4. we can create a new property using both the notation.

# ------------------------------ object methods ------------------------------ #
1. when a function is used inside a object and it contains a function value then we can say it as method.

    const jonas = {
        calcAge: function (birthyear) {
            return 2037 - birthyear;
        },
    };
    console.log(jonas.calcAge(1991));
    console.log(jonas['calcAge'](1991));

2. so we can use both dot and bracket notation for accessing object.
3. but make sure sure you use the correct key name.
4. javascript allow us access values between properties using 'this' keyword.
5. 'this' point to the current object calling.

    const jonas = {
        birthyear: 1991,
        calcAge: function () {
            return 2037 - this.birthyear;
        },
    };
    console.log(jonas.calcAge());
    console.log(jonas['calcAge']());

6. we can create new property using dot notation.

    const jonas = {
        birthyear: 1991,
        calcAge: function () {
            this.age = 2037 - this.birthyear;
            return;
        },
    };
    console.log(jonas.calcAge());

7. the above code will will create a new property with key name 'age'.

# ---------------------------- iteration: for loop --------------------------- #

    for (initialization; condition; finalExpression) {
        // code to be executed
    };

1. iteration means to run a code repeatedly based on the condition.
2. for loop is way to iterate a block of code.
3. it will run until the codition reach false.
4. on the other hand we change the final expression on every iteration.

    for (let i = 0; i < 5; i++) {
        console.log(i);
    };
    // Output: 0, 1, 2, 3, 4

# ------------------ looping arrays, breaking and continuing ----------------- #
1. to loop a array use array.length to find the length of the array.

    const arr = [0,1,2,3,4,5];
    for (let i = 0; i < arr.length; i++) {
        console.log(arr[i]);
    };
    // Output: 0, 1, 2, 3, 4, 5

2. in the above code the array length is 6.
3. so loop will run from 0 to 5.
4. break statement will skip all remaining iteration.
5. continue statement will skip the current iteration and run the remaining iteration.
6. use break and continue in loop with coditions appiled to it.

    const arr = [0,1,2,3,4,5,6,7,8,9];
    for (let i = 0; i < arr.length; i++) {
        if(i==2){
            continue;
        };
        if(i==5){
            break;
        };
        console.log(arr[i]);
    };
    // Output: 0, 1, 3, 4

# ------------------- looping backward and loop inside loop ------------------ #
1. to loop backward first find the length.
2. initialize with that length and decrement it.
3. finally make the condition.

    const arr = [0,1,2,3,4,5];
    for (let i = arr.length; i > 0; i--) {
        console.log(arr[i]);
    };
    // Output: 5, 4, 3, 2, 1, 0

4. we can use a loop inside another loop.
5. this concept is called nested loop.

    for (let i = 0; i < 2; i++) {
        for (let j = 0; i < 2; j++) {
            console.log([i,j]);
        };
    };
    // Output: [0,0][0,1][1,0][1,1]

# -------------------------------- while loop -------------------------------- #
1. while loop checks the condition before executing the loop's body.
2. If the condition is true, the code inside the loop is executed.
3. This process repeats until the condition evaluates to false.

    while (condition) {
        // code to be executed
    }

4. the below program will explain while loop.

    let count = 0;

    while (count < 5) {
        console.log(count);
        count++;
    }
    // Output: 0, 1, 2, 3, 4

# -------------------------- think like a developer -------------------------- #
1. stay calm and get to the problem with a plan.
2. take a logical and rational approach.
3. 4-step framework to solve any problem.

# ---------------------- 4-step problem solving approach --------------------- #
1. make sure you 100% understand the probem.
2. ask the right questions to get a clear picture of the problem.
3. example - "we need a function that reverse whatever we pass into it"
4. "whatever" means what?
5. like array, string, numbers, etc.
6. "what should it do if we pass something else?"
7. "how the output should be look like - array, string, or anything else."
8. "how to recognize whether the argument is a number, a string, or an array?"
9. how to revese a number, a string, andd an array?
10. always use divide and conquer method to break a big problem into small sub-problems.
11. sub - problems -> check if arguments is a number, a srting, or an number -> implement reversing a number -> implement reversing a string -> implement reversing an array -> return reversed value.
12. do research till you find answers for your solutions.
13. write pseudo-code before the actual code.

# ------------------------ debugging with online tools ----------------------- #
1. stackoverflow -> use it to find answers for any questions that come for us.
2. debugging -> use to check wether any error arise in our code.
3. mdn website -> use to check the function names and how it behaves in javascript.

# --------------------------- errors in javascript --------------------------- #
1. software bug -> defect or problem in a computer program.
2. it is the unexpected or unintended behaviour of a computer program is a software bug.
3. bugs are completely normal in software development.
4. become aware there a bug in our program.
5. identify - during development -> testing software -> user reports during production -> contexts: browsers, users, etc.
6. find - developer console [simple code], debugger [complex code].
7. fix - replace wrong solution with new correct solution.
8. prevent - searching for the same bug in similar code -> writing tests using testing software.

# ------------------ debugging with console and breakpoints ------------------ #
1. first step is to identify where and in which place the bug occurs.
2. besides console.log() we have console.warn() and console.error().
3. we need to manually log that warning and error to show thae user.
4. second step is to find what causes the bug.
3. like this forgotten errors (remember propmt function always returs a string).
4. console.table() will print like a table in console window.
5. third step is to fix the bug by finding solutions.
6. for some task use the breakpoints in order to find the current values of the variables.
7. in chrome browser goto inspect window and click sources, under that click our js file and create a breakpoint by just clicking on the line number.
8. when we reload, program will stop at each breakpoint and we can check the values at each breakpoints.
9. use play,pause,next button to control the flow of the file.

# ---------------------------- coding challenge 1 ---------------------------- #
1. given an array of forecasted maximum temperatures, the thermometer displays a string with these temperatures.
2. Examples: [17,21,23] will print "...17*C in 1 days ... 21*C in 2 days ... 23*C in 3 days ..."
3. create a function 'printForecast' which takes in an array 'arr' and logs a string like the above to the console.
4. use the problem-solving framework: understand the problem and break it up into sub-problems!

TEST DATA 1: [17, 21, 23]
TEST DATA 2: [12, 5, -5, 0, 4]

finding solution using problem-solving framework: 
1. understand the problem.
    -array transformed to string, seperated by ...
    -what is the x days? answer: index + 1
2. break it up into sub-problems.
    -transform array into string
    -transform each element into string with *C 
    -string needs to contain day (index + 1)
    -add ... between elements and start and end of string.
    -log string in console to check the output value.

    const data1 = [17, 21, 23];
    const data2 = [12, 5, -5, 0, 4];
    
    const printForecast = function(arr){
        let str = '...';
        for(let i=0; i<arr.length; i++){
            str = str + `${arr[i]}*C in ${i+1} days ...`;
        }
        console.log(str);
    }
    printForecast(data1);
    printForecast(data2);