cmd wont work, use git bash

# ------------------ TERMINAL COMMANDS FOR FILE MANIPULATION ----------------- #
-- ls
[used to 'list' contents of the current working directory]

-- ls -a
[used to 'list all contents including hidden files and folder' of the current working directory]

-- start .
[to open the current working directory in file explorer]

-- ls folder_name
[used to 'list' contents of that folder]

-- ls folder_name/folder_name
[used to 'list' contents of that folder inside folder]

-- pwd
[used to print the 'present working directory']
[/c/Users/Administrator]

-- cd folder_name/
[cd is an acronym for 'Change Directory']

--cd ..
[move back from current working directory one level]

-- touch purple.js
[creates 'purple.js' file in the current Directory]
[creating single file]

-- touch purple.js red.css
[creates 'purple.js and red.css' file in the current Directory]
[creating multiple files]

-- touch Pets/Horses/rocky.png
[creates 'rocky.png' file in the given path directory]

-- mkdir Raghul
[creates a 'Raghul' folder in the current working directory]

-- mkdir Raghul Raju
[creates a 'Raghul and Raju' folders in the current working directory]

-- rm purple.js
[to delete the file from the current directory permanantly]

-- rm purple.js red.--s
[to delete multiple files from current directory permanantly]

-- rm -rf Raghul
[to delete the folder from the current working directory]
[r-recusive,f-force]

# --------------------- BASIC SETTINGS USING GIT COMMAND --------------------- #
-- git --version 
[displays the git version installed in our machine]

-- git config --global user.name "Raghul Ashok"
[to set user name of git in our machine]

-- git config --global user.email raghulashok16@gmail.com
[to set user email of git in our machine]

-- git config user.name
[to check the user name in our git]

-- git config user.email
[to check the user email in our git]

# -------------------------------- REPOSITORY -------------------------------- #
1. a git repo is a workspace which tracks and manages files within a folder, each repo has its own history
<------------------------------->
Note: before we can do anything git-related, we must initialize a repo first!, this is something you do once per project. initialize the repo in the top-level folder containing your project

Note: git status command will display the status of the git only after git init command was used............

Note: do not use [git init] inside a repo, this will corrupt that REPOSITORY, so always use [git status] to check wether repo is already initialized

# ----------------------- THINGS TO DO BEFORE COMMITING ---------------------- #
-- git status 
[gives information on the current status of a git repository and its contents]

-- git init 
[to create a empty git repository]

# ---------------------------- BASIC GIT WORKFLOW ---------------------------- #
1. work on stuff --> make new files, edit files, delete files,etc
2. add changes --> group specific changes together, in preparation of committing
3. commit --> commit everything that was added

# ---------------------------------- ADDING ---------------------------------- #
1. updates particular/all files from working area to staging area.
-- git add file1 file2 
[file1 and file2 will be staged]
-- git add . 
[stage all files from working area]

# --------------------------------- COMMITING -------------------------------- #
1. updates particular/all files from staging area to repository.
-- git commit
-- git commit -m "message for that commit"    [ -m flag represents message ]
-- git commit -a -m "message for that commit"
[-a flag represents all files]

# ---------------------------------- LOGGING --------------------------------- #
-- git log 
[logs all the commits with their messages]

# ------------------------------ ATOMIC COMMITS ------------------------------ #
1. commit a single change,features or single fix with a meaningfull message.
2. this helps easier to rollback changes later on.
3. it also helps review or project/code easier.
4. finally commit singe thing commit/single file commit as possible.

# --------------------------------- MESSAGES --------------------------------- #
1. always use present tense for the commit messages.

# ------------------------ CONFIG SETTINGS FOR VS CODE ----------------------- #
1. VS Code config must be set before using git commit because it will need a external editor to write some large messages.
2. So search config from internet and run git config command for vs code.
3. Also install code in vs code from cntrl+shift+p command.

 # ------------------------------ ONELINE LOGGING ----------------------------- #
-- git log --oneline
[this will log the first line of the commit messages form all the commits]

# ----------------------------- AMMENDING COMMITS ---------------------------- #
1. You can redo the preious commit using he --amend option.
2. This will add some additional files to the previous commit.
-- git commit -m "some message"
-- git add forgotten_file
-- git commit --amend

# ------------------------------ IGNORING FILES ------------------------------ #
1. We can tell git which files and directories to ignore in a given repository using a .gitignore file.
2. This is important while we use important credentials and some api keys that others dont want to see that.

# --------------------------------- BRANCHES --------------------------------- #
1. think of branches as alternative timeline for a project.
2. they enable us to create separate contexts where we can try new things, or even work on multiple ideas in parallel.
3. if we make changes on one branch, they do not impact the other branches(unless we merge the changes).

# ------------------------------- MASTER BRANCH ------------------------------ #
1. default branch name is master.
2. it does not do anything special or have fancy powers.
3. it is just like other branches.

# ----------------------------------- HEAD ----------------------------------- #
1. simply a pointer that refers to the cuurent loaction in your repository.
2. it points to a particular branch reference.
3. it always points to the latest commit you made.

# ----------------------------- VIEWING BRANCHES ----------------------------- #
1. git branch command is used to view your existing branches.
2. default branch in every git repo is master, though you can configure this.
-- git branch
[ it will show all branch in that repo ]
[ * represent the active branch we are on ]
-- git branch -v
[ -v flag gives commit message along with the branch name ]

# ----------------------------- CREATING BRANCHES ---------------------------- #
1. git branch branch_name command is used to create new branch upon the current head.
2. this will just create the branch and it will not switch to that branch(head stays the same).
-- git branch branch_name

# ---------------------------- SWITCHING BRANCHES ---------------------------- #
1. after creating the branch we can switch between branches using these commands.
-- git switch branch_name

# --------------------- ANOTHER WAY OF SWITCHING BRANCHES -------------------- #
1. checkout command was made to add a standalone switch command which is much simpler.
2. swich was the new way and checkout was the old school.
-- git checkout branch_name

# ---------------------- CREATING AND SWITCHING BRANCHES --------------------- #
1. -c flag is used to create a new branch.
2. swich command is used to move to that branch.
3. this combination will do in a single line.
-- git switch -c branch_name
-- git checkout -b branch_name
[these both commands will create a new branch]

# ------------------ SWITCHING BRANCHES WITH UNSTAGED FILES ------------------ #
1. data will be lost without commiting and switching branches.
2. always commit before switching branches.
3. data will be overwritten if we dont commit them.

# ----------------------------- DELETING BRANCHES ---------------------------- #
-- git branch -D branch_name
-- git branch -d branch_name
1. -D is shortcut for force delete.
2. -d is normal delete.
3. this should be done when necessary.

# ----------------------------- RENAMING BRANCHES ---------------------------- #
1. move to that branch.
2. use m flag to rename the branch.
-- git switch branch_name
-- git branch -m new_branch_name

# ----------------------------- MERGING BRANCHES ----------------------------- #
1. branching makes it super easy to work within self-contained context, but often we want to incorporate changes from one branch into another.
2. we can do this using git merge command.
3. we merge branches, not specific commits.
4. we always merge to the current HEAD branch.
-- git switch master
-- git merge sub_branch
5. this method is called a fast-forward merge.

# ------------------------------ MERGE CONFLICTS ----------------------------- #
1. when merging 2 branches merge conflicts occurs.
2. git will tell us if there is an conflict and we have to open that file and resolve the conflicts.
3. git will decorate the code where the conflict occurs with their branch name.
4. these symbols are called conflict markers.
5. <<<<<<<<<HEAD [ actual code ] ======== 
6. ========= [ code we try to merge ] >>>>>>>>>

# ------------------------- RESOLVING MERGE CONFLICT ------------------------- #
1. vs code will open both merge files.
2. edit the required line of code.
3. remove the conflict markers in that document.
4. add your changes and then make a commit.

# --------------------------------- GIT DIFF --------------------------------- #
1. used to view changes between commits, branches, files, our working directory and more.
2. we can use it often to find the changes overtime.
-- git diff
3. compares staging area and our working directory.
4. git declares one file as 'a' and other file as 'b'.
5. chunks shows the line to be removed and added[@@ -3,4 +3,5 @@]

# ------------------------- VIEWING UNSTAGED CHANGES ------------------------- #
-- git diff
[compares staging area and our working directory]

# --------------------- VIEWING WORKING DIRECTORY CHANGES -------------------- #
-- git diff HEAD
[compares staged and unstaged with our last commit]

# -------------------------- VIEWING STAGED CHANGES -------------------------- #
-- git diff --staged
-- git diff --cached
[compares staging area with our last commit]

# -------------------------- DIFFING SPECIFIC FILES -------------------------- #
-- git diff HEAD file_name
-- git diff HEAD file_name1 file_name2
-- git diff --staged file_name
[viewing changes within a specific file]

# ----------------------------- COMPARING CHANGES ---------------------------- #
-- git diff branch1..branch2
-- git diff branch2..branch1
[compares changes in the 2 branches]
[order we specify is important]

# ---------------------- COMPARING CHANGES ABOUT COMMIT ---------------------- #
-- git log --online
[it returs oneline commit message with commit_hash]
-- git diff commit_hash1..commit_hash2
-- git diff commit_hash2..commit_hash1
[compares changes between 2 commits using commit hashes]
[order matters]

# --------------------------- WHY WE NEED GIT STASH -------------------------- #
1. changes come to the destination branch.
2. git won't let me switch if it detects potential conflicts.

# --------------------------------- STASHING --------------------------------- #
[stashing - the changes are temporarily removed from the files in working area and you can choose to restore or discard the changes later by simple commands]
1. git provides an easy way of stashing these uncommited changes.
2. so that we can return to them later, without having to make unnecessary commits.
-- git stash
-- git stash save
3. it helps you to save changes that you are not yet ready to commit.
4. we can stash changes and then come back to them later.
5. running git stash will take all uncommited changes(staged and unstaged) and stash them, reverting the changes in your working copy.
-- git stash pop
6. use pop keyword to remove stashed changes in your stash and re-apply them to your working copy.

# ------------------------------ GIT STASH APPLY ----------------------------- #
1. use it to apply whatever is stashed away, without removing it from the stash.
2. this can be useful if you apply stashed changes to multiple branches.
-- git stash apply

# ----------------------- WORKING WITH MULTIPLE STASHES ---------------------- #
1. you can add multiple stashes on to the stack of stashes.
2. they will all be stashed in the order you added them.
-- git stash list
[it will list all the stash stack queue we have]
-- git stach apply stash@{stash_queue_number}
[it will get the changes we stash in that stack queue]

# ---------------------- DROPING OR CLEARING THE STASHES --------------------- #
1. removing particular stash based on its stack number.
-- git stash drop stash@{0}
2. removing all stashes from stack.
-- git stash clear

# ------------------------ CHECKING OUT OLDER COMMITS ------------------------ #
1. moving head position to a previous commits.
-- git log --oneline
-- git checkout commit_hash
2. at this time you will recevie a message saying "you are in detached head state".
3. here head points to the particular commit_hash

# ---------------------------------------------------------------------------- #
Note: head is a pointer to the current branch reference.
Note: branch reference is a pointer to the last commit made on a particular commit.

# ----------------------------- RE-ATTACHING HEAD ---------------------------- #
1. for viewing/observing purpose dont edit and code when we are in detached head.
2. at this time we can switch to the master easily.
-- git log --oneline
-- git checkout commit_hash
-- git switch master
-- git status

# ------------------- CREATING BRANCHES FROM DETACHED HEAD ------------------- #
1. for creating a new version from a particular commit, go for detached head at that point and make a new branch at that commit_hash.
-- git log --oneline
-- git checkout commit_hash
-- git switch -c branch_name
-- git status
[update new changes at that branch like create new files/edit files, etc]
-- git add.
-- git commit -m "commit_message"
-- git status

# ------------------- CHECKING OUT OLDER COMMAND WITH TILDE ------------------ #
1. HEAD~1 - refers to the commit before HEAD.
2. HEAD~2 - refers to 2 commit before HEAD.
-- git checkout HEAD~1

# ------------------------ FORGET PREVIOUS BRANCH NAME ----------------------- #
1. if you are in detached head and if we want to go back to our previous forgotten branch.
-- git switch -

# ------------- DISCARDING/REVERTING CHANGES ON OUR WORKING AREA ------------- #
1. if we done some mistakes in our code and we want to delete that.
2. deleting line by line is very hard and tedious process.
3. git helps us to revert changes in our working area with the previous commit we made.
-- git checkout HEAD index.js
[this line of code will revert the change we made]
-- git checkout -- index.js test.js
[this is the shorthand]
[we can also revert multiple file by specifying multiple file names]

# ----------------------- UN-MODIFYING WITH GIT RESTORE ---------------------- #
1. git introduced new command for undoing operations.
2. checkout command has various functionality, so restore was introduced to specific function.
-- git restore index.js
[this method cannot be undone, so think before you use]
-- git restore --source HEAD~2 index.js
[this will restore the index.js file from 2 commit we preious commited]

# ----------------------- UNSTAGING FILES WITH RESTORE ----------------------- #
1. if you accidentally added a file to the staging area and dont want it to be commited.
[if we added a file that contains important api and credit card details]
2. it is easy to remove that using restore.
-- git restore --staged api.js
3. this will remove the file from the staging area and the file is not delted.
4. but removed from the staging area.3

# --------------------------------- GIT RESET -------------------------------- #
1. by mistake we made some commits on the main branch.
2. but we need to make those commits in other branch.
3. to undo these commits you can use git reset command.
4. running this command will reset the repo to a specific commit.
5. it is called plain reseet.
-- git log --oneline
[copy commit_hash you want to reset]
-- git reset commit_hash
6. this command will remove the commits from repo but it will not remove the changes in the working directory.
7. now we can create a new branch and commit those changes.
8. there is a alternate method called hard reset.
-- git reset --hard commit_hash
9. if you want to undo both commit and the actual changes in your files.
10. the use this code.
11. we can also use HEAD~1 or any tilde values.

# ----------------------------- REVERTING COMMITS ---------------------------- #
1. it is similar to git reset while the undo things.
2. but unlike git reset, revert will create a brand new commit which reverses/undos the changes from a commit.
3. beacuse it results in a new commit, you will be promted to enter a new commit message for that new revert commit.
-- git revert commit_hash
4. both git reset and revert help us reverse changes.
5. but there is significant difference when it comes to collaboration [this topic is down below somewhere, find it]
6. if you want to reverse some commits that other people already have on their machine
7. then you should use revert command.
8. if you want to reverse commits that you havent shared with others.
9. then use reset command, no one will ever know about the commit.

# ----------------------------- WHAT IS GITHUB ? ----------------------------- #
1. github is a service that host git repositories in the cloud and makes it easier to collaborate with other people in the world.
2. it is just a hosting platform for git repositories.
3. you can put your own git repo on github and access them from anywhere and share them with people around the world.
4. beyond hosting github provides additional features that are native to git.
5. finally github helps people share and collaborate on repos.
6. github is not the only option but there are other brands like gitlab, bitbucket, gerrit, etc.
7. founded in 2008.
8. early 2020 it reached over 40 million users and over 190 million repositories on the platform.
9. github is now the world's largest host of source code.
10. in 2021, 56 million users.

# --------------------------- WHY YOU SHOULD GITHUB -------------------------- #
1. collaboration.
2. if you everr plan on working ona project with at least on other person.
3. github will make your life easier.
4. whether you are building a hobby project with your friend or you are collaborating with the entire world.
5. github is essential for collaborating with people.
6. open source projects.
7. today github is the home of opensource projects on the internet.
8. projects ranging from react to swift are hosted on github.
9. if you plan on contributing to open source projects, you'll need to get comfortable working with github.
10. exposure.
11. your github profile showcase your own projects and contributions to other projects.
12. it can act as a sort of resume that many employers will consult in the hiring process.
13. additionally, you can gain some clout on the platform for creating or contributing to popular projects.
14. stay up to date.
15. being cactive on github is the best way to stay up to date with the projects and tools you rely on.
16. learn about upcoming changes and the decisions/debate behind them.

# -------------------- CLONING GITHUB REPO WITH GIT CLONE -------------------- #
1. cloning - if we want a local copy of an existing repository.
2. all we need is the github repo url.
-- git clone url
3. before cloning make sure you are not in a repository.
4. after cloning it gives you access to the full git history of the cloned project.

# -------------------------- CLONING NOT GITHUB REPO ------------------------- #
1. git clone is not particular made for github.
2. it can be use to clone from other hosting urls.

# -------------------------- GITHUB SETUP SSH CONFIG ------------------------- #
1. adding ssh key is different in versions.
2. watch the latest updated video in udemy.

# -------------------------- CREATING REPO IN GITHUB ------------------------- #
1. option 1 - existing repo in machine [just push your local repo to your github repo]
2. option 2 - start from scratch [create repo in github, clone it, make changes, push to your repo]

# -------------------------------- GIT REMOTES ------------------------------- #
1. before we can push anything up to github, we need to tell about our remote repository on github.
2. we need to setup a destination to push up to.
3. in git we refer these destination as remotes.
4. each reotes is simply a url where a hosted repository lives.
5. to view any existing remotes for your repository, we can run git remote or git remote -v (verbose, for more info).
-- git remote -v
6. this just displays a list of remotes.
7. if you havent added any remotes yet, you wont see anything.
8. we can add a new remote.
-- git remote add <name> <url>
9. a remote is really two things: a url and a lebel.
10. to add a new remote, we need to provide both to git.
-- git remote add origin https://github.com/blah/repo.git
[this tells git, anytime i use the name 'origin', i am refering to this particular github repo url]
11. orgin is a conventional git remote name, but it is not at all special.
12. it is just a name for a url.
13. when we clone a github repo, default remote name setup for us is called origin.
14. you can change it.
-- git remote add mygithuburl https://github.com/test/repo.git
15. most people leave it as it is.
16. there are some commands ro rename and delete remotes if needed.
-- git remote rename <old> <new>
-- git remote remove <name>

# --------------------------- INTRODUCING GIT PUSH --------------------------- #
1. if you already have an existing repo locally that you want to get on github.
    # create a new repo on github.
    # connect your local repo ( add a remote ).
    # push up your changes to github.
2. now that we have a remote set up, lets push some work up to github.
3. to do this, we need to use git push command.
-- git push <remote> <branch>
4. we need to specify the remote we want to push up to and the specific local branch we want to push up to that remote.
5. git push master tells git to push up the master branch to our orgin remote.
-- git push orgin master
6. we can push any branch in our local machine.
-- git push orgin <branch_name>
7. we can push n number of branches to the github.

# --------------------------- TOURING A GITHUB REPO -------------------------- #
1. in github website goto our repository we currently working on.
2. in that repo we have bunch of stuff we can view.
3. on the of the main thing is we can swith brances with dropdown, its very simple.
4. like git kraken it dont have visual ui but it will display a detailed message.
5. if you have any doubt watch the video again.

# -------------------------- PRACTICE WITH GIT PUSH -------------------------- #
1. while pushing our code from local machine to github, we can not push two branches at same time.
2. we need to push one by one.

# ------------------------- A CLOSER LOOK AT GIT PUSH ------------------------ #
1. when we first create a repo and push local files to git using "master" branch then it will create a master branch in the github.
2. after creating the master branch in the github we the add some files in the local machine and push that commit to the github at same master branch.
3. now the master branch is not created again, but instead the github tells that there is a branch name "master" so use that branch.
4. this is how push command works on the git and git command.
5. in certain cases we have to push a branch to github with different branch name.
6. so there is way to do it.
-- git push <remote> <local-branch>:<remote-branch>
-- git push orgin pancake:dosa
7. here we are pussing a local pancake branch to a remote dosa branch.

