# --------------------------------- DATABASE --------------------------------- #
1. it's a collection of data, a method for accessing and manipulating that data.
2. data is everywhere and it is the most valuable commodity in the world.
3. everyday we deal with tons of data like drone footages, camera photos, location data and many more.
4. databases aren't anything special, they're just hardware and software, there's just computers.
5. hardware is the mechanical part and the software is the actual code on top that allows usto collect and use the data really useful.
6. without data no websites can work.
7. drum memory was used initially to store data before disk drive was introduced.
8. drum memory is a cylindrical shaped and thats why databases have cylindrical icons.

# --------------------------- WHAT IS A DATABASE ? --------------------------- #
1. database is a system, hardware and software that allows a user to store, organize and use data.

# ------------------------------ DATABASE BRANDS ----------------------------- #
[maria db, microsoft sql server, cassandra, mongo db, my sql, oracle database, redis, sql lite, postgres sql, ibm db2 and many more]

# ------------------------ THINGS TO KNOW IN DATABASE ------------------------ #
1. how to put data in db.
2. how to use/update/learn from data.
3. how to remove data.

# ---------------------------- CONFUSING ACRONYMS ---------------------------- #
DBMS - DataBase Management System
RDBMS - Relational DataBase Management System
SQL - Structured Query Language

# ----------------------------- FIVE DATA MODELS ----------------------------- #
1. relational model -> mysql, postgres -> most popular, e-comerce.
2. document model -> mongo db, firebase -> data in document.
3. key value model -> dinamo db -> simplest way to access data.
4. graph model -> more complex, data connected in differentways, social media uses these model.
5. wide columnar model -> newly introduced -> cassandra, google big table.

# ------------------------------- WHAT IS SQL ? ------------------------------ #
1. SQL is a language that is used to talk to a databases.
2. SQL statement is nothing but a Query
3. SELECT * FROM USERS
4. the above is the Query or SQL Statement

# ------------------------------ QUERY BREAKDOWN ----------------------------- #
-- SELECT NAME FROM USERS WHERE ROLE = 'MANAGER';
NAME --> identifier
WHERE --> keyword
ROLE = 'MANAGER' --> condition
'MANAGER' --> expression

# ------------------------- DECLARATIVE VS IMPERATIVE ------------------------ #


# ------------------------------- DATABASE MODEL ------------------------------ #
1. HIERARCHICAL [TREE LIKE FLOW CHART DESIGN]
2. NETWORKING 
3. ENTITY-RELATIONSHIP
4. RELATIONAL
5. OBJECT ORIENTED
6. FLAT
7. SEMI-STRUCTURED

# ----------------------------------- CRUD ----------------------------------- #
c --> create
r --> read
u --> update
d --> delete

# ----------------------------------- TABLE ---------------------------------- #
1. table is the representation of object.
2. each table has its name.
3. each column represent specific types of data.
4. each row represent singular piece of data.

# ---------------------------------- COLUMN ---------------------------------- #
1. each column has its own name.
2. collection of columns is called degree.
3. we can specify what data should be put in that column and that concept is called domain/constraint.
4. column is also called as attributes.

# ----------------------------------- ROWS ----------------------------------- #
1. rows are also called as tuples.
2. tuple is nothing but single record of data.
3. tuples is nothing but multiple record of data.
4. each tuples must follow the column constraint.
5. collection of rows/tuples is called cardinallity.

# ------------------------ PRIMARY KEY AND FOREIGN KEY ----------------------- #
1. primary key uniquely identify data in the table.
2. foreign key is used to add data to the main table but it is a primary key in the secondary table.
3. foreign key is used to make a relationship between two or more tables.

# ------------------------------- OLTP vs OLAP ------------------------------- #
1. realtional databases support day to day office work and support in analysis.
OLTP --> ONLINE TRANSACTION PROCESSING
OLAP --> ONLINE ANALYTICAL PROCESSING

# ------------------------- exercise [OLTP and OLAP] ------------------------- #
1. a database is being used to log orders and customers --> OLTP 
2. a database is being used to figure out what new products we should offer --> OLAP
3. a database is being used to derive statistics for reporting to the executives --> OLAP
4. a database is being used to keep track of logged in users --> OLTP

# ------------------------------- valentina db ------------------------------- #
1. valentina DB is a cross platform tool which has the UI that help to manage postgres SQL.
2. postgres is the most popular relational database available in the market.
3. these two are free.

# -------------------------------- installing -------------------------------- #
1. install latest version of postgres with compatible 32/64 bit.
2. set password for postgres in installation process.
3. use 'root' as pasword.
4. then install valentina studio.
5. mandatory key required.
6. register in website which is absolutly free.
7. from the orders tab copy the serial key and use it in valentina studio.

# ---------------------------- POSTGRESS DEFAULTS ---------------------------- #
url - localhost
port - 5432
username - postgres
password - root
connection url - local host

# -------------------------- importing the database -------------------------- #
1. if our postgres not showing in the valentina.
2. then connect manually and add it using our postgres password.
3. downlaod the data.zip from udemy resource.
4. extract it in our pc.
5. in the schema editor right click and choose new database.
6. create a name for our database.
7. click on the database name -> file -> load dumb.
8. in the dialog box choose sql and choose the database data in our extracted folder.
9. dump process will run for some times and database data will be created.
10. do this process for all the databases.
11. after you imported all the databases data check each database and its table data.

# ------------------------------- SQL COMMANDS ------------------------------- #

DDL - data definition language
DQL - data query language
DML - data manipulation language
DCL - data control language

DDL - create, alter, drop, rename, truncate, comment
DQL - select
DML - insert, update, delete, merge, call, explain plan , lock table
DCL -->  grant, revoke

# -------------------------- basic questions in sql -------------------------- #
1. give me a list of all employees in the company?
2. how many departments are the in the company?
3. how many times has employee 10001 had a rise?
4. what title does 10006 have?

NOTE: "" --> double quotes [ COLUMN ]
      '' --> single quotes [ text/string ]
 
# ------------------------------ renaming colums ----------------------------- #
-- SELECT emp_no AS "Employee Id" FROM "employees" 
-- SELECT dob AS "Birthday" FROM "employees" 
-- SELECT first_name AS "First Name" FROM "employees" 

# --------------------------- COLUMN CONCATTENATION -------------------------- #
1. to make our data prettier, simpler, etc.
[concat(TEXT,TEXT)]
[concat(COLUMN1,COLUMN2)]
2.concatenate the employee number and title name of the employee into one column.
-- SELECT concat(emp_no,'is a',title) AS "employee detail" FROM titles;
3. concatenate the first and last name of the employee into one column.
-- SELECT emp_no, concat(first_name, ' ', last_name) AS "full name" FROM "employees"; 

# --------------------------------- functions -------------------------------- #
1. function is a set of steps that creates a single value
2. Two types of functions in SQL are aggregate and scalar function
3. AGGREGATE --> it works on all given data and gives a single data output, operate on many records to produce 1 value
4. SCALAR --> it works on individual row and gives individual result for each row, operate on each record independently

# ---------------------------- AGGREGATE FUNCTIONS --------------------------- #
avg()
count()
min() 
max()
sum()

# --------------------------------- comments --------------------------------- #
-- SINGLE LINE COMMENT

/*
*MULTI LINE
*COMMENTS
*/

# ------------------------------ common mistakes ----------------------------- #
1. misspelling commands
2. using ; instad of , or vice versa
3. using " instad of '
4. " is for tables
5. ' is for text/string
6. invalid column name

# -------------------------------- filter data ------------------------------- #
1. get a list of all female employees.
2. 'where' keyword is used to filter out data.
-- SELECT first_name FROM employees WHERE gender = 'F';

# --------------------- filter using  multiple conditions -------------------- #
1. filtering based on 2 & 3 conditions.
2. 'and' keyword is used to filter multiple conditions.
-- SELECT firstname, lastname FROM users WHERE firstname = 'Raghul' AND lastname = 'Ashok'; 
-- SELECT firstname, lastname FROM users WHERE firstname = 'Raghul' AND lastname = 'Ashok' AND hire_date = ' 15-11-2023';

# -------------------------------- or keyword -------------------------------- #
-- SELECT firstname FROM users WHERE firstname = 'Raghul' OR lastname = 'Ashok'; 
-- SELECT firstname FROM users WHERE salary = 2000 OR firstname = 'Kumar'; 
-- SELECT firstname FROM users WHERE firstname = 'Raghul' AND lastname = 'Kumar' OR salary = 15900; 
-- SELECT firstname FROM users WHERE firstname = 'Raghul' OR firstname = 'Ram';

# --------------------------- filter using and/not --------------------------- #
1. how many female customers do we have from the state of kerala or tamilnadu
-- SELECT COUNT(name) FROM customers WHERE ( state = 'kerala' OR state = 'tamilnadu') AND gender = 'F'; 

# -------------------------------- not keyword ------------------------------- #
1. to filter everthing except certain condition.
2. select all customers are not male?
-- SELECT firstName, gender FROM users WHERE NOT gender = 'M'; 
3. how many customers are not 55 and 76 years age ?
-- SELECT COUNT(age) FROM customers NOT age = 55 AND NOT age = 76;

# --------------------------- comparision operators -------------------------- #
1. who over the age of 44 has an income of 100000?
-- SELECT name from employees WHERE age >44 AND income = 100000;

[10 > 20     - false]
[10 < 20     - true]
[10 <= 20    - true]
[10 >= 20    - false]
[0 = 0       - true]
[1 != 0      - true]
[1 <> 0      - true]
['Mo' = 'mo' - false]

2. How many female customers do we have from the state of Oregon (OR)?
-- SELECT COUNT(firstName) FROM customers WHERE gender = 'F' and state = 'OR';
3. Who over the age of 44 has an income of 100 000 or more? (excluding 44)
-- SELECT COUNT(income) FROM customers WHERE age > 44 and income >= 100000;
4. Who between the ages of 30 and 50 has an income less than 50 000?
-- (include 30 and 50 in the results)
-- SELECT COUNT(income) FROM customers WHERE age >= 30 and age <= 50 AND income < 50000;
5. What is the average income between the ages of 20 and 50? (Excluding 20 and 50)
-- SELECT AVG(income) FROM customers WHERE age > 20 and age < 50;

# ---------------------------- order of operation ---------------------------- #
1. FROM (which table).
2. WHERE (what to filter the data).
3. SELECT (display the selected / sorted data).

# ---------------------------- operator precedence --------------------------- #
1. A statement having multiple operators is evaluated based on the priority of operators.
2. parenthesis -> multiplication/division -> subraction/addition -> not -> and -> or.
3. if the operators have equal precedence, then the operators are evaluated directionally, from left to right or right to left.
4. use parenthesis while using operators to avoid clash between operators.
5. Always remember the following: HIGHEST to LOWEST,
    1. Parenthesis
    2. Arithmetic Operators
    3. Concatenation Operators
    4. Comparison Conditions
    5. IS NULL, LIKE, NOT IN, etc.
    6. NOT
    7. AND
    8. OR
6. OR is the lowest on the totem pole.

# ----------------------- operator precedence exercise ----------------------- #
1. Select people either under 30 or over 50 with an income above 50000 that are from either Japan or Australia
2. What was our total sales in June of 2004 for orders over 100 dollars?

# -------------------------------- null values ------------------------------- #
1. when a record does not have a value then it is considered as empty.
2. 'null' is the term used to represent a missing/empty value.
3. null value is different from a zero value or a field that contains spaces.
4. to set a null value, be carefull in that situation.
5. null is acontentious issue no matter what opinion you have people may dsagree.
6. null is also a special value.
-- 1=1 [output: true]
-- 1!=1 [output: false]
-- null=null [output: null]
-- null<>null [output: null]
7. no matter what you do with null it will always be null(subtract, divide, equal, etc).

# -------------------------------- is keyword -------------------------------- #
1. always check for nulls when necessary.
2. filter out nulls.
3. 'is' operator allow us to filter on values that are null, not null, true or false.
-- SELECT name, lastName from "Student" WHERE name IS NOT NULL;
-- SELECT * FROM users WHERE age = 20 IS FALSE;

# ------------------------------ null coalescing ----------------------------- #
1. 