# ------- Section 14: Object-Oriented Programming (OOP) With JavaScript ------ #


# ------------------------------- SECTION INTRO ------------------------------ #
1. this section covers all the topics rergarding object-oriented-programming.
2. every developers need to know this topic.
3. different ways of implementing oop.
4. constructor functions, es6 classes, obect.create, inheritance between classes, and many more topics covered in this section.


# -------------------- WHAT IS OBJECT-ORIENTED PROGRAMMING ------------------- #
1. it is a programming paradigm based on the concept of objects.
2. paradigm -> style of code [how we write and organize code].
3. we use objects to model(describe) real-world or abstract features.
4. objects may contain data(properties) and code(methods).
5. by using objects, we pack data and the corresponding behaviour into one block.
6. in oop, objects are self-contained pieces/blocks of code.
7. objects are building blocks of applications, and interact with one another.
8. interactions happen through a public interface(API): methods that the code outside of the object can access and use to communicate with the objecct.
9. oop was developed with the goal of organizing code, to make it more flexible and easier to manitain(avoid spaghetti code).
10. today oop is not the only way to maintain neat code, functional programming is also a another way to maintain neat cleaner code. 
11. class is like a blueprint from which we can create new objects based on the rules described in the class.
12. so its like a architechture, the architect develops a blueprint to exactly plan and describe a house.
13. so the blue print is an abstract plan, like a set of rules, but nothing tangible that you can actually touch.
14. from that blueprint, many real houses can be built.
15. this concept is same in the classes.
16. we call all objects created through a class instances of that class.
17. instance is an real object that we can use in our code, which was created from a class, and a class is not an object.
18. the new object/instance created from the class is like a real house created from an abstract blueprint.
19. in JavaScript, with the help of a single class, we can create many objects from that class.
20. its like building many house with the help of a single blueprint.
21. the main thing is these objects/instance can have different data but they have the same functionality/functions.
22. to create a class there are four fundamental princilples of oop.
23. abstraction, encapsulation, inheritance, polymorphism.
24. abstraction basically means to ignore or to hide details that dont matter. this allow us to get an overview perspective of whatever it is that we are implementing instead of messinng with details that dont really matter to our implementation.
25. encapsulation basically means to keep some properties and methods private inside the class so that they are not accessible from outside the class. however some methods can be exposed as a public interface, which we call API. encapsulation prevents external code from accidentally manipulating internal properties/state. encapsulation allows to cahnge internal implementation without the risk of breaking external code.
26. in oop, when we have two classes that are closely related, like user and admin, we can have one class inherit from the other. so we will have one parent class and one clild class. the child class then extends the parent class. here parent class is the user and the child class is the admin because both have some common functionalities like user, password, email. so instead of writing the code again we can extent it and get that functionalities.
27. below is a dummy class data and it is not a JavaScript code.

    User {
        user
        password
        email

        login(password){
            //login logic
        }
        sendMessage(str){
            //sending logic
        }
    }

    Admin {
        user
        password
        email
        permissions

        login(password){
            //login logic
        }
        sendMessage(str){
            //sending logic
        }
        deleteUser(user){
            //deleting logic
        }
    }

28. here admin is also a user but an extended user.
29. polymorphism means a child class can overwrite a method it inherited drom a parent class. in greek polymorphism means many shapes.
30. in other words, polymorphism means that a child can overwrite a method that it inherited from a parent class.
