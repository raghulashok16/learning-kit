# ------------------------------- WHAT IS REACT ------------------------------ #
1. it is an open source javascript library used for building frontend applications.
2. with react we can create fast and better frontend application.
3. react was created by facebook in 2011.
4. currently it is the most popoular and most used javascript  frontend library.

# -------------------------- WHY REACT IS SO POPULAR ------------------------- #
1. before react was created, when our web page loaded in a browser, our browser create tree like structure with our html code.
2. this tree structure is called document object model[DOM].
3. by using this dom in javascript, we can add various functionality for our application like hiding side bar on button click, handling form inputs, etc.
4. to achive these functionality with vanilla javascript we need to type large number of lines.
5. with this approach it is hard to manage and very messy while work on large applications.
6. so in react we dont need to worry about the vanilla javascript code.
7. beacuse in react we divide our application into small piece of code called components.
8. and react will take care of creating and updating dom.
9. components is used to write reusable and better organized code.
10. we buid all components individually and then combine them to build our page.
11. so by creating small components we can easily manage our code and our application also works fast.
12. with react we can create single page application which means our application loads only one time.
13. and all pages comes without reloading the entire page.
14. this will make our application almost 50% faster than normal applications.

# -------------------------------- VIRTUAL DOM ------------------------------- #
1. react is so fast because of the virtual dom feature.
2. when we create a web page with react it will maintain a virtual representation of your webpage.
3. so this virtual representaion is called vitual dom.
4. whenever we want to update our webpage, we describe the changes to the virtual dom.
5. actualy we dont directly modify the real dom, reacts virtual dom efficienty compares the new virtual dom.
6. by this way react will know which compoents should be removed and which components should be added based on the virtual dom comparison.
7. in this approach, we will update only necessary things and we dont need to load the whole page.
8. Virtual dom makes updating the real dom smoother and more efficient, and it ehances the performance and increaces the user experiences.

# ---------------------------- SOFTWARES REQUIRED ---------------------------- #
1. node js[node pakacge manager is used to install react and some aditional features]
2. code editor[visual studio code]
3. es7/react snippets in vs code.
3. browser[chrome recommended]

# ---------------------------- CREATING REACT APP ---------------------------- #
1. create react app [method 1]
2. vite [method 2]
3. creact react app is old way and it take much time compare to vite.

# ----------------------- CREATING REACT APP WITH VITE ----------------------- #
1. go to our project folder and run vite command in the terminal.
# npm create vite@latest
2. tpye your project_name and hit enter.
3. select the framework[react] and hit enter.
4. select javascript[recomended for basic projects] or typescript[recomended for typecscript projects] base and hit enter.
5. now we need to change directory
# cd project_name
6. we need to install some pakages like webpack, babel, etc.
# npm install
7. open the project in vs code and open the terminal and launch with the below command.
# npm run dev
8. it will show the link of our application[localhost link]

# ------------------------ INSIDE VITE REACT TEMPLATE ------------------------ #
1. we have node folder where we have all the required pakages and libraries for our application.
2. without node modules we cant run our application and that is why we use # npm install command.
3. finally we dont touch this foler.
4. in src folder we spend all the time writing our code.
5. in asserts folder we put all our images, icons, fonts, etc.
6. app.jsx is the root component of our application.
7. app.jsx is the starting pont of the component chain and it is called root component.
8. .jsx is the extension the react component but it is similar to the js file.
9. unlike normal html code we use jsx[javascript XML].
10. with jsx we can write HTML and javascript code together and this is the heart of the react application.
11. we need to export default component so that we can use that in the other component.
12. app.css file is used to style our react application.
13. we import that css file at top of the each components.
14. main.jsx is the most important file of the react. 
15. this main file connect our components to the index.html file.
16. index.html is the main html file running in our react application.
17. every component inside our react applicaton is rendered inside the root id of the html file.
18. in .gitignore file we can define what files should not be uploaded in git.
19. this is because some important api keys will be there when we work on large projects.
20. in pakage.json file all the information will be available including which version we use in our project.
21. finally we have shorts for the commands we will be using for the terminals.

# ------------------------ MAIN THINGS IN THE INDEX.JS ----------------------- #
# ReactDOM.createRoot(document.getElementById('root')).render();

# -------------------------- JAVASCRIPT FUNDAMENTALS ------------------------- #
1. var, let & const.
2. arrow function.
3. accessing object.
4. destructing.
5. array methods. [map & filter]
6. spread operator.
7. ternary operator.
8. modules.
9. export and import in components.

# ------------------------------- VAR LET CONST ------------------------------ #
1. these 3 keywords are used to define variables in javascript.
2. let and const are new features in modern javascript ES6.
3. most of the developers use let and const instead of using var.
4. var is a function scope so most of the developers dont prefer that because it can make many bugs in reading values.
5. on the otherhand let and const are block scope, so it can be availabe inside that perticular block.
6. const values can not be reassigned.
7. let values can be reassigned at any time.
8. finally prefer to use const keyword before let.

# ------------------------------ ARROW FUNCTION ------------------------------ #
1. arrow function is another way to define javascript functions.
2. it is the simple and easy way.
3. it is very usefull when working on advanced topics.
4. use let or const for assigning arrow function.
5. always prefer const rather than let, to avoid reassigning that function.
#    const sayhello = () => {
        console.log("this is a arrow function");
    }

# ----------------------------- ACCESING OBJECTS ----------------------------- #
1. object is a collection of key/value pair.
2. we need the exact key to acces that particular value.
3. square operator is used rarely.
#    const user = {
        name: "raghul",
        email: "snipcot@gmail.com",
    }

    console.log(user.name);
    console.log(user["name"]);

# ---------------------------- OBJECT DESTRUCTION ---------------------------- #
1. this method is tedious because when number of key/value increases it results in large number of line codes.
#    const user = {
        name: "raghul",
        email: "snipcot@gmail.com",
    }

    const name = user.name;
    const email = user.email;
    console.log (name, email);
2. to solve this problem object destructuring was introduced.
3. here we use single line to destruct code.
# const {name, email} = user;
4. we can destruct an obeject and also rename that using collen.
# const {name: userName, email: userEmail} = user;

# -------------------------------- MAP METHOD -------------------------------- #
1. this is one of the most used array method in react appliction.
2. it is mostly used to displaying the list of data.
3. map with normal function.
#   const products = ["product1", "product2", "product3"];
    const displayItems = products.map(function(product){
        return "<li>" + product + "</li>";
    });
    console.log(displayUtems);
4. map with arrow function.
#   const products = ["product1", "product2", "product3"];
    const displayItems = products.map((product) => "<li>" + product + "</li>");
    console.log(displayUtems);
5. map using template literals.
#   const products = ["product1", "product2", "product3"];
    const displayItems = products.map((product) => `<li>${product}</li>`);
    console.log(displayUtems);

# ------------------------------- FILTER METHOD ------------------------------ #
1. filter method is used to filter array.
2. filter is used to remove items from existing array.
3. it will always return a new array.
4. filter method with return.
#   const ages = [5, 23, 14, 30, 21];
    console.log(ages);
    const adults = ages.filter((age) => {
        return age > 18;
    });
    console.log(adults);
5. filter method without return.
#   const ages = [5, 23, 14, 30, 21];
    console.log(ages);
    const adults = ages.filter((age) => age > 18);
    console.log(adults);
6. filtering ages array that dont contain age 30.
#   const ages = [5, 23, 14, 30, 21];
    console.log(ages);
    const adults = ages.filter((age) => age !== 30);
    console.log(adults);

# ------------------------------ SPREAD OPERATOR ----------------------------- #
1. combining two or more array with the old way using concat method.
#   const arr1 = [1, 2, 3];
    const arr2 = [4, 5, 6];
    const arr3 = [7, 8, 9];
    const numbers = arr1.concat(arr3, arr2);
    console.log(numbers);
2. combining two or more array with modern javascript using spread operator.
#   const arr1 = [1, 2, 3];
    const arr2 = [4, 5, 6];
    const arr3 = [7, 8, 9];
    const numbers = [0, ...arr1, ...arr2, 8, 99, ...arr3];
    console.log(numbers);
3. we can also use spread operator in objects.
#   const obj1 = {
        name : "raghul",
    };
    const obj2 = {
        hobby : ["reading", "cricket"],
    }
    const user = {...obj1, ...obj2, nickName : "snipcot"};
    console.log(user);

# ---------------------- TERNARY / CONDITIONAL OPERATOR ---------------------- #
1. it is used for adding conditions.
2. ternary operators are the shortcut way to write if-else condition.
#   codition ? trueExpression : falseExpression
#   const marks = 50;
    const result = marks > 35 ? "pass" : "fail";
    console.log(result);

# -------------------- MODULES / COMPONENTS IN JAVASCRIPT -------------------- #
1. module is a file that contains code to perform specific task.
2. it can contain variables, objects, functions, etc.
3. dividing our code into multiple parts is called modules.
4. export keyword is used to make a module public so that other modules can use that.
#   export function boo(){...}
5. developers call modules as components.
6. import keyword is used to link a module into our current module.
#   import {boo} from "./location";

# ----------------------------- EXPORT AS DEFAULT ---------------------------- #
1. there is some difference between export vs export default.
#   export default function boo(){...}
2. in importing the  export default functions there is no need of curlybraces {}.
#   import boo from "./location";
3. if we have one default export and some export function in a component.
#   import boo,{func1, func2} from "./location";
4. it is a good practise to have export declaration at the end of every component code.
#   export default boo;
    export {function_name}

# ------------------------------ BASICS OF REACT ----------------------------- #
1. building components.
2. jsx & babel.
3. adding elememts.
4. adding js expression.
5. attributes.
6. events.
7. state.
8. useState hook.
9. handling inputs.
10. mapping lists.

# -------------------------- BUILDING OWN COMPONENT -------------------------- #
1. component is reusable piece of code that used to define certain part of user interface.
2. always create a folder inside src folder named "components".
3. inside that component folder create our own component named "Card.jsx".
4. always use ".jsx" extension while creating components.
5. file name of components should start in uppercase like "Card.jsx", "Cart.jsx" otherwise it will not work in browser.
6. always import react in every component we create. [1st line]
#   import React from "react";
7. there are 2 types of components functional and class components.
8. class components are old because it requires advanced concept of javascript.
9. so class components are little complex compared with functional components.
10. install vs code extension - es7/react snippet.
11. "rafce" shortcut keyword for component boiler plate and press tab button.
12. every component must return a single element / nested single element.
13. otherwise it will show error "jsx expression must have one parent".
14. always use parenthesis for the return statement in components.

# ------------------------------- JSX AND BABEL ------------------------------ #
1. jsx code which is modern code for writing html and javascript together.
2. our browser dont understand jsx, it understand just vanilla javascript / plain javascript.
3. so a compiler comes into action, it will convert jsx into javascript.
4. babel will do this work.

# ----------------------- ADDING ELEMENTS IN COMPONENT ----------------------- #
1. always use fragment as parent element when adding elements in components.

    <React.Fragment>
    ...
    </React.Fragment>

2. simple way fo react fragment

    <>
    ...
    </>

# ----------------------- JAVASCRIPT EXPRESSION IN JSX ----------------------- #
1. use curybrases and write javascript code.
2. in this below example task value is declared inside the component function and just abouve the return statement.

   const Todo = () => {
        const tasks = 12;
        return (
            <>
            <h1>Tasks : {task}</h1>
            </>
        );
    };
    export default Todo;

3. example 



# ------------------------------- REACT ROUTER ------------------------------- #
1. check the latest npm for react router and run in terminal.
2. in main.jsx import BrowserRouter from react-router-dom. [short-tips: type rrd , vscode will auto type the word]
3. wrap 'App' component inside 'BrowserRouter' component.
4. BrowserRouter component is very import and without that routing will not work.
5. this component keeps the record of current url and navigation of our history.
6. Route is the main toll to specify which component should display based on the path 'attribute'.
7. always use 'Route' inside 'Routes' or else error message will be displayed in the console saying 'Route' never rendered directly.
8. so always import 'Routes' and 'Route' combined.
9. always use path='/' for home page.
10. element={</Home>} is used to display which component should be display when the path was selected.

# --------------------------- ADDING NOT FOUND PAGE -------------------------- #
1. it is important to create a 404 page not found in every app.
2. because end user wants to know what happend in the website.
3. <Route path='*' element={ <NotFound/> } />
4. we can create our own style of 404 page not found component.

# -------------------------- SINGLE PAGE APPLICATION ------------------------- #
1. single page application will not reload.
2. if we use ancchor tag for page jump, the app will reload.
3. <a href='/article'>Article</a>
4. for this unnecessary reload, 'Link' compoent was created in react-router-dom.
5. <Link to='/article'>Article</Link>
6. <NavLink to='/article'>Article</NavLink>
7. the main difference between 'Link' and 'NavLink' is that 'NavLink' will add active class if selected.
8. this feature is not availabe in 'Link'.

# ----------------------------- ROUTE PARAMETERS ----------------------------- #
1. route parameter is a dynamic segment of the URL that allows you to capture values from the URL and pass them as props.
2. it can be identified by a colon followed by the parameter name.
3. <Route path="/users/:userId" elememt={ <UserDetail/> } />
4. :userId is a route parameter. 
5. e.g., /users/123 , React Router will extract the value of userId from the URL and pass it to the UserDetail component as a prop.
6. You can access route parameters inside your component using React Router's useParams().
7. let { userId } = useParams();
8. importing useParams is mandatory.

# ------------------------------- QUERY STRING ------------------------------- #
1. it is used to pass data to web servers through HTTP GET requests.
2. https://example.com/search?sortBy=name&category=book
3. query string begins with ? and contains two key-value pairs
3. 'sortBy' and 'category' are the key.
4. 'name' and 'book' are their corresponding values.
5. 'useSearchParams' is used to get that key and values associated with the query string.
6. importing useSearchParams from react-router-dom is mandatory.
7. const [searchParams, setSearchParams] = useSearchParams();
8. const sortBy = searchParams.get('sortBy');
9. const category = searchParams.get('category');
10. <p> SortBy:{sortBy} Category:{category} </p>
11. this line of p tag will get the details from the query string and print the values.
12. we can also set the searchParams manually by using on click button event.
    
    setSearchParams({
    sortBy: "views",
    category:"author",
    })

# ------------------------------ NESTED ROUTING ------------------------------ #
1. for using nested routing, we need to create a <Route> inside <Route>

    <Route path='/admin' element={<Admin/>} >
        <Route path='sales' element={<Sales/>} >
        <Route path='sellers' element={<Sellers/>} >
    </Route>

2. react-router-dom has a componrnt which is used to display our sub route components in our specified location.
3. Outlet is used to add our nested rout element in that place.
4. it is mandatory to import outlet from react-router-dom.
5. <Outlet/>

# --------------------------- ROUTING BEST PRACTISE -------------------------- #
1. always create a separate component named (<AllRouting/>) for routing.
2. then import that compoent in App Component.
3. this increases readability of our code.

# ------------------------ PROGRAMMATICALLY NAVIGATION ----------------------- #
1. this feature is used conditionally jump to the home page.
2. for example if a employee try one accesing a page of manager using the link.
3. then we can conditionally check if login credentials matches the manager.
4. if not we can redirect the current page to home page or any other page using 'Navigate' component.
5. we need to import it from react-router-dom.

    if (user.role !== 'manager'){
        return <Navigate to='/' />
    }

6. in the above example we used 'Navigate' component.
7. but in react there is a hook named 'useNavigate'
8. we need to import this hook from react-router-dom.
9. inside our component we need to use navigate variable.

    const navigate = useNavigate();

10. now when we click a go back button, use this handler function.

    const handleBack = () => {
        navigate(-1);
    }

11. if we need to jump to a different page then we can specify the location.

    const handleNavigate = () => {
        navigate('/articles');
    }

# ------------------------- USEEFFECT HOOK IN DETAIL ------------------------- #
1. it is used to peform side effects in our components.
2. side effects are actions which are performed with the 'outside world'.

    fetching data from api,
    accesing local storage,
    directly updating dom,
    timer functios (setTimeout - setInterval)

3. useEffect(()=>{}); [this code will run everytime when app gets the mount and re-render happens]
4. useEffect(()=>{},[]); [this code will run only once when the app gets mounted]
5. useEffect(()=>{},[dependencies]); [this code will run everytime when app gets mounted and when dependencies changes]

# ------------------------ USEEFFECT CLEANUP FUNCTION ------------------------ #
1. when we use 

# ------------------------------- HTTP REQUESTS ------------------------------ #

    get    - used to fetching data from server.
    post   - used to sumbit data to server.
    put    - used to replace data at server.
    patch  - used to update specific data at server.
    delete - used to delete data from server.

# ------------------------------ NEED FOR AXIOS ------------------------------ #
1. in react backend comminication is achived using HTTP protocol.
2. fetch api in js is also used but axios was prefered by most of the developers.
3. because axios has much aditional features.
4. it can be used in both client-side and server-side(node.js) HTTP requests.

# ------------------------- FETCHING DATA WITH AXIOS ------------------------- #
1. we need to install axios in our app.

    npm install axios

2. then import it in our component.

    import axios from 'axios';

3. axios has get method which is used to fetch data from server.

    axios.get('url')

4. this code will return a promise, we can handle it using (then) or (async/await).

    .then((res)=>{console.log(res)});

5. always console log the response(res) to view the structure of the json.
6. this helps how the data was binded in the json.
7. you can check the network->fetch/xhr in the inspect page.
8. this will show the status of our axios method.
9. 200 is the status success message.
10. every http requests & response is divided into two sections.
11. HEADER - here we define meta data.
12. BODY - here we define or get data.
13. we can use the axios response value to a state in our component.

    .then((res)=> setMethod(res.data));

14. in fetch method we need a additional line to convert into json format.

    .then((res)=> res.json())
    .then((data)=> setMethod(data.results));

15. so using axios we can avoid this line of converting into json.

# ---------------------------- LOADING INDICATORS ---------------------------- #
1. create state named isLoading.
2. this state is going to handle loading indicator.
3. this helps us to show the end users that the data are loading behind.
4. first we need to set false in isLoading.
5. inside useEffect set false before api call.
6. after api call set true.
7. now use this state to conditionally reder with && operator and ternary operator.
8. sometimes we cannot abe to see the loading indicators because we have high speed internet.
9. we can reduce the inter speed in our brouser using inspect mode.
10. goto network tab and change no throttling to slow 3g.
11. this will reduce the internet speed.
12. always use loading indicators(any spiner animation) with easy animation class given in tailwind.

# ------------------------------ handling errors ----------------------------- #
1. when we are working in promises, we can use catch method for error handling.
2. after then method, at the end we need to use catch method.
3. create a state variable for error messages.
4. based on this message we can create custom error page that will be displayed to the users.

    .then((res)=>{...})
    .catch((err)=>{
        setIsLoading(false); // for removing loading indicators
        setErrors(err.message);
    });

5. prefered method by users due to less code and maintainability.

# --------------------- handling promise with async await -------------------- #
1. for fetching api data, we can use a seperate async function.
2. inside useEffect call that fetchAPI function.
3. while using async function, use a try/catch to handle errors.

    const fetchAPI = async ()=>{
        setIsLoading(true);
        try{
            const res = await axios.get('url');
            setState(res.data);
            setIsLoading(false);
        }catch (err) {
            setIsLoading(false);
            setErrorState(err.message);
        }
    };

4. this method should be called inside useEffect.

# ----------------------- 2 ways to work with API data ----------------------- #
1. optimistic method

    update data on UI -> call API to update data at backend

2. pessimistic method

    call API to update data at backend -> update data on UI

3. all modern wbsite use optimistic method because the ui path should be updated immediatly when user clicked.
4. in social media if we hit a like button it must be display immediatly.
5. pessimistic method will take some time to update data on UI.

# -------------------------- API for adding new data ------------------------- #
1. we need to use axios post method to add data to the server.
2. status code for successfully created data is 201.
3. while adding new data to api, never forget to add id information.
4. this will help us to use it at map function.
5. this allow us to identify difference between 

    axios.post('API url', newSellers)
    .then(res => setSellers([res.data, ...sellers]))

6. sometimes error will come so it can be handled using catch method or by using try/catch block.
7. jsonplaceholder websites allow total of 11 count so after 11 it will show error regarding 'id'.

# ------------------------------ deleting seller ----------------------------- #
1. to delete a seller we can use a handle delete seller function.
2. we need to pass seller id to the handle function, so use a arrow function to pass data.
3. after using filter method set that filtered data to the sellers.
4. then update the server about the deleted seller using delete() method.
5. if any error occurs catch them.

    const deleteSellers = (id) => {
        setSellers(sellers.filter((s) => s.id !== id));
        axios.delete('apiurl/${id}')
        .catch((err) => {
            setErrors(err.message);
            setSellers(sellers);
        });
    };

6. status 200 will show that it has been successfully deleted.

# -------------------------- updating seller details ------------------------- #
1. create a handleUpdate function with seller details as argument.
2. so use arrow function for onClick.
3. as we know axios patch() method is used to update specific data in server.
4. 