CSS --> Cascading Style Sheet

HTML is responsible for the structure of the page
CSS is responsible for the styling of the page
<------------------------------->

CSS1 --> releasd in 1996
CSS2 --> releasd in 1998
CSS3 --> in development (Split up into different modules versions -color modules, text modules, image module, etc) no additional versions in CSS
<------------------------------->

MUST LEARN IN CSS:

BASIC --> css introduction, selectors, css features, combinators, positionaing
ADVANCED --> background & images, dimensions, units, sizes, javascript & css, responsiveness, styling forms, working with text & fonts
EXPERT --> flexbox, CSS grid, transformations, transitions & animations, writing future-proof CSS
<------------------------------->

3 WAYS TO ADD CSS TO HTML:

--> Inline CSS ( adding style attribute to any tag in html file )
--> Internal CSS ( adding style tag in the head tag and adding styles inside it )
--> External CSS ( using ext css file we link using link tag inside head tag )
<------------------------------->

FONTS:

font-family: "Times New Roman", Times, serif;
font-family: Arial, Helvetica, sans-serif;
font-family: "Lucida Console", "Courier New", monospace;
NOTE: we can add multiple fonts
<------------------------------->

GOOGLE FONTS:

step 1: https://fonts.google.com/
step 2: Select any font and copy its link tag and paste it in our head tag
step 3: copy its font family and paste it in our css file
<------------------------------->

FONT COLOR:

color: blue;
color: green;
<------------------------------->

SELECTORS:

--> Element Selectors [ h1{} ]
--> Class Selector [ .class_name {} ]
--> Universal Selectors [ *{} ]
--> ID Selectors [ #id_name {} ]
--> Attribute Selectors [ [disabled] {} ]
<------------------------------->

CASCADING AND SPECIFICITY:

Cascading --> multiple rules can be applied to the same element
Specificity --> used to resolve conflicts araising from multiple rules
Order of Specificity -->
    --> Inline
    --> #ID
    --> .class, :pseudo, [attribute]
    --> <Tag> , ::pseudo-element
<------------------------------->

INHERITANCE:

In CSS inheritance, the child element will naturally inherit properties from its parent element.
<------------------------------->

COMBINATORS:

--> Adjacent Sibling  
    h2 + p { color : red; } 
    [ Element share the same  parent, Second  element comes immediately after first element ]
--> General Sibling
    h2 ~ p { color : red; }
    [ Element share the same parent, Second  element comes after first element ]
--> Child
    div > p { color : red; }
    [ Second element is a direct child of first element ]
--> Desendant
    div p { color : red; }
    [ Second element is a desendant of first element ]
<------------------------------->

VALUE TYPES:

--> pre-defined options
    ~> display : block;
    ~> overflow : auto;
--> colors
    ~> background : red;
    ~> color : #Fa923f;
    ~> color : #ccc;
--> Length, Sizes and Numbers
    ~> height : 100px;
    ~> width : 100%;
    ~> order : 1;
--> functions
    ~> background : url(...);
    ~> transformat : scale(...);
<------------------------------->

BOX MODEL:

~> In CSS, the term "box model" is used when talking about design and layout.
~> The CSS box model is essentially a box that wraps around every HTML element.
~> It consists of: margins, borders, padding, and the actual content.
~> The box model allows us to add a border around elements, and to define space between elements. 

--> Content - The content of the box, where text and images appear
--> Padding - Clears an area around the content. The padding is transparent
--> Border - A border that goes around the padding and content
--> Margin - Clears an area outside the border. The margin is transparent


NOTE: Important: When you set the width and height properties of an element with CSS, you just set the width and height of the content area. To calculate the full size of an element, you must also add padding, borders and margins.

320px (width)
+ 20px (left + right padding)
+ 10px (left + right border)
+ 0px (left + right margin)
= 350px
<------------------------------->

BORDER: 

~> The CSS border properties allow you to specify the style, width, and color of an element's border. 

Border Style:

~> The border-style property specifies what kind of border to display.
~> The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border).

The following values are allowed in border-style property:

--> dotted - Defines a dotted border
    border-style: dotted;
--> dashed - Defines a dashed border
    border-style: dashed;
--> solid - Defines a solid border
    border-style: solid;
--> double - Defines a double border
    border-style: double;
--> groove - Defines a 3D grooved border. The effect depends on the border-color value
    border-style: groove;
--> ridge - Defines a 3D ridged border. The effect depends on the border-color value
    border-style: ridge;
--> inset - Defines a 3D inset border. The effect depends on the border-color value
    border-style: inset;
--> outset - Defines a 3D outset border. The effect depends on the border-color value
    border-style: outset;
--> none - Defines no border
    border-style: none;
--> hidden - Defines a hidden border
    border-style: hidden;
--> 4 sides
    border-style: dotted dashed solid double;

Border Width:

~> The border-width property specifies the width of the four borders.
~> The width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick.

border-width: 5px;
border-width: medium;
border-width: thick;
border-width: 5px 20px; /* 5px top and bottom, 20px on the sides */
border-width: 20px 5px; /* 20px top and bottom, 5px on the sides */
border-width: 25px 10px 4px 35px; /* 25px top, 10px right, 4px bottom and 35px left */

Border Color:

~> The border-color property is used to set the color of the four borders.