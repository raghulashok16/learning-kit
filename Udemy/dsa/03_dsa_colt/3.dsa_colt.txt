# ----------------------- OBJECTIVES IN BIG O NOTATION ----------------------- #
1. the need for something like big o notation.
2. describe what big o notation is.
3. simplify big o expressions.
4. define 'time complexity' and 'space complexity'.
5. evaluate the time complexity and space complexity of different algorithm using big o notation.
6. describe what a logarithm is.

# ------------------------------ BIG O NOTATION ------------------------------ #
1. we can have different solutions when solving chalenges.
2. but there will be only one solution which is the best among every solution.
3. this best is determined by the big o notation.
4. so performance and memory plays the key role for finding the best code.
5. basically big o allow us to compare code of different programmers.
6. for example when we work in company and we are working on huge amount of data, at that time one algorithm implementation can save an hour everty time it runs compared to our code.
6. so most interviewer ask about big o notation.

# ------------------------------ TIMING OUR CODE ----------------------------- #
1. when solving problems, always check for any mathematical formulas instead of multiple looping [for example: calculate sum of all numbers from 1 to n numbers. 
2. method 1 -> loop from 1 to 6 and store it in a new variable. 
3. method 2 -> use mathematical function instad of loop (n*(n+1)/2)]
4. so always keep in mind to do better code that satisfies the below conditions.
    -- faster?
    -- less memory-intensive?
    -- more readable?
    -- less code? [optional preference]
5. the first two consition are more important.
6. our browser gives a method to calculate the time taken to complete the process we do.

    var t1 = performance.now();
    addUpTo(1000000000);
    var t2 = performance.now();
    console.log(`Time Elapsed: ${(t2 - t1) / 1000} seconds.`);




