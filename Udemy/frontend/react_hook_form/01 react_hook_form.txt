# ------------------------------- Installation ------------------------------- #
1. using node pakage manager we can install react hook form.
TERMINAL COMMAND:-------------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
npm install react-hook-form
//////////////////////////////////////////////

2. react hook form supports both javascript and typescript.

# ------------------------- register and handleSubmit ------------------------ #
1. for using react-hook-form we must have a form elements like input tag and it must be wrapped inside the form tag.
INPUT ELEMENT TEMPLATE:------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<input
    type="text"
    name="fullName"
    placeholder="Full Name"
    className="..."
/>
//////////////////////////////////////////////

2. the first step is to import the "useForm" hook from the react-hook-form;
IMPORTING USEFORM HOOK:----------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
import { useForm } from "react-hook-form";
//////////////////////////////////////////////

NOTE:
useForm hook consists of many informations like register, handleSubmit, watch, etc.
But we destructure what we want in our app.
Also you can console log the use form to view all the informations.

3. registering the input elements is mandatory.
REGISTERING INPUT ELEMENTS:------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
const { register } = useForm();

<input
    type="text" 
    name="fullName"
    placeholder="Full Name"
    className="..."
    {...register('fullName')}
/>
//////////////////////////////////////////////

4. without register react-hook-form does not recognize it.
5. unlike usual way of submiting form, react-hook-form has a special method called handleSubmit.
6. this has built-in functionalities to prevent the defaults in the form.
7. also dont forget to add the onsubmit in our form.
ADDING HANDLING SUBMIT:---------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
const { register, handleSubmit } = useForm();

const sendInfo = (data) => {
 console.log(data);
}

<form onsubmit={handleSubmit(sendInfo)}>
<input
    type="text"
    name="fullName"
    placeholder="Full Name"
    className="..."
    {...register('fullName')}
/>
</form>
//////////////////////////////////////////////

8. in the above console.log(data), only the registered elements will be logged.

# -------------------------------- validation -------------------------------- #
1. adding validation if the registered field is empty.
REQUIRED VALIDATION:--------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<form onsubmit={handleSubmit(sendInfo)}>
<input
    type="text"
    name="fullName"
    placeholder="Full Name"
    className="..."
    {...register('fullName', { required : true })}
/>
</form>
//////////////////////////////////////////////

2. now if the registered field is empty then the handleSubmit will not work.
3. instead it will add the error message inside the formState.
HANDLING ERRORS:----------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
const { register, handleSubmit, formState: {errors} } = useForm();

<form onsubmit={handleSubmit(sendInfo)}>
<input
    type="text"
    name="fullName"
    placeholder="Full Name"
    className="..."
    {...register('fullName', { required : true })}
/>
{errors.fullName && <p>error exist</p>}
</form>
//////////////////////////////////////////////

4. in the above code the errors was read only for the 'fullName' input field.
5. we can display the error in any color using css/css framework classes.
CONDITIONAL CLASSES FOR CUSTOM ERRORS:----------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<input
    type="text"
    name="fullName"
    placeholder="Full Name"
    className={ ${errors.fullName ? "border border-red-500" : "border-none"} }
    {...register('fullName', { required : true })}
/>
{errors.fullName && <p>error exist</p>}
</form>
//////////////////////////////////////////////

6. react-hook-form supports many validation rules,
    - required
    - min
    - max
    - minLength
    - maxLength
    - pattern
    - validate
7. after registering an element we can add multiple rules inside the register method using object.
8. to have our custom error message, we have to write it inside the object.
CUSTOM ERROR MESSAGES:-----------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<input
    type="text"
    name="fullName"
    placeholder="Full Name"
    className={ ${errors.fullName ? "border border-red-500" : "border-none"} }
    {...register('fullName', { required : "this field is required" })}
/>
{errors.fullName && <p>{errors.fullName.message}</p>}
</form>
//////////////////////////////////////////////

9. we can also set the minLength and maxLength rule in the form field.
CUSTOM INPUT LENGTH:----------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
<input
    type="text"
    name="fullName"
    placeholder="Full Name"
    className={ ${errors.fullName ? "border border-red-500" : "border-none"} }
    {...register('fullName', {
         required : "this field is required",
         minLength: {
            value: 3,
            message: "this field should have atleast 3 characters",
         },
         maxLength: {
            value: 8,
            message: "this field should not exceed 8 characters",
         },
        })
    }
/>
{errors.fullName && <p>{errors.fullName.message}</p>}
</form>
//////////////////////////////////////////////
