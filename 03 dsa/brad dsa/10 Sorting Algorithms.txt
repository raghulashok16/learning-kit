104. Bubble Sort Algorithm
106. Insertion Sort Algorithm
108. Selection Sort Algorithm
110. Merge Sort Algorithm
112. Quick Sort Algorithm

# -------------------------------- bubble sort ------------------------------- #

function bubleSort(arr){
    for(let i = 0; i<arr.length; i++){
        for(let j = 0; i<arr.length-i-1; i++){
            if(arr[j] > arr[j+1]){
                [arr[j], arr[j+1]] = [arr[j+1], arr[j]];
            }
        }
    }
    return arr;
}

function bubleSort(arr){
    let swapped = false;
    while(!swapped){
        swapped = true;
        for(let i = 0; i<arr.length; i++){
            if(arr[i] > arr[i+1]){
                [arr[i], arr[i+1]] = [arr[i+1], arr[i]];
                swapped = false;
            }
        }
    }
    return arr;
}

# ------------------------------ insertion sort ------------------------------ #

function insertionSort(arr){
    for(let i = 1; i<arr.length; i++){
        const currentElement = arr[i];
        let j = i-1;
        while(j<=0 && arr[j] > currentElement){
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = currentElement;
    }
    return arr;
}

# ------------------------------ selection sort ------------------------------ #

function selectionSort(arr){
    for(let i = 0; i<arr.length-1; i++){
        let minIndex = i;
        for(let j = i+1; j<arr.length; j++){
            if(arr[j] < arr[minIndex]){
                minIndex = j;
            }
        }
        if(minIndex != i){
            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];
        }
    }
    return arr;
}

# -------------------------------- merge sort -------------------------------- #

function mergeSort(arr){
    if(arr.length <= 1){
        return arr;
    }
    const mid = Math.floor(arr.length/2);
    const left = mergeSort(arr.slice(0,mid));
    const right = mergeSort(arr.slice(mid));

    return merge(left,right);
}

function merge(left, right){
    let merged = [];
    let leftIndex = 0;
    let rigthIndex = 0;
    
    while(leftIndex < left.length && rigthIndex < right.length){
        if(left[leftIndex] < right[rigthIndex]){
            merged.push(left[leftIndex]);
            leftIndex++;
        } else {
            merged.push(right[rigthIndex]);
            rigthIndex++;
        }
    }
    return merged.concat(left.slice(leftIndex).concat(right.slice(rigthIndex)));
}

# -------------------------------- quick sort -------------------------------- #

function quickSort(arr){
    if(arr.length <= 1){
        return arr;
    }

    const pivot = arr[arr.length-1];
    const left = [];
    const rigth = [];

    for(let i = 0; i<arr.length-1; i++){
        if(arr[i] < pivot){
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }

    }
    return [...quickSort(left), pivot, ...quickSort(right)];
}

# ---------------------------------------------------------------------------- #