# -- Section 2: JavaScript ES6 Refresher (Important concepts of JavaScript ) - #


# -------------------------- JAVASCRIPT FUNDAMENTALS ------------------------- #
1. var, let & const.
2. arrow function.
3. accessing object.
4. destructing.
5. array methods. [map & filter]
6. spread operator.
7. ternary operator.
8. modules.
9. export and import in components.

# ------------------------------- VAR LET CONST ------------------------------ #
1. these 3 keywords are used to define variables in javascript.
2. let and const are new features in modern javascript ES6.
3. most of the developers use let and const instead of using var.
4. var is a function scope so most of the developers dont prefer that because it can make many bugs in reading values.
5. on the otherhand let and const are block scope, so it can be availabe inside that perticular block.
6. const values can not be reassigned.
7. let values can be reassigned at any time.
8. finally prefer to use const keyword before let.

# ------------------------------ ARROW FUNCTION ------------------------------ #
1. arrow function is another way to define javascript functions.
2. it is the simple and easy way.
3. it is very usefull when working on advanced topics.
4. use let or const for assigning arrow function.
5. always prefer const rather than let, to avoid reassigning that function.
#    const sayhello = () => {
        console.log("this is a arrow function");
    }

# ----------------------------- ACCESING OBJECTS ----------------------------- #
1. object is a collection of key/value pair.
2. we need the exact key to acces that particular value.
3. square operator is used rarely.
#    const user = {
        name: "raghul",
        email: "snipcot@gmail.com",
    }

    console.log(user.name);
    console.log(user["name"]);

# ---------------------------- OBJECT DESTRUCTION ---------------------------- #
1. this method is tedious because when number of key/value increases it results in large number of line codes.
#    const user = {
        name: "raghul",
        email: "snipcot@gmail.com",
    }

    const name = user.name;
    const email = user.email;
    console.log (name, email);
2. to solve this problem object destructuring was introduced.
3. here we use single line to destruct code.
# const {name, email} = user;
4. we can destruct an obeject and also rename that using collen.
# const {name: userName, email: userEmail} = user;

# -------------------------------- MAP METHOD -------------------------------- #
1. this is one of the most used array method in react appliction.
2. it is mostly used to displaying the list of data.
3. map with normal function.
#   const products = ["product1", "product2", "product3"];
    const displayItems = products.map(function(product){
        return "<li>" + product + "</li>";
    });
    console.log(displayUtems);
4. map with arrow function.
#   const products = ["product1", "product2", "product3"];
    const displayItems = products.map((product) => "<li>" + product + "</li>");
    console.log(displayUtems);
5. map using template literals.
#   const products = ["product1", "product2", "product3"];
    const displayItems = products.map((product) => `<li>${product}</li>`);
    console.log(displayUtems);

# ------------------------------- FILTER METHOD ------------------------------ #
1. filter method is used to filter array.
2. filter is used to remove items from existing array.
3. it will always return a new array.
4. filter method with return.
#   const ages = [5, 23, 14, 30, 21];
    console.log(ages);
    const adults = ages.filter((age) => {
        return age > 18;
    });
    console.log(adults);
5. filter method without return.
#   const ages = [5, 23, 14, 30, 21];
    console.log(ages);
    const adults = ages.filter((age) => age > 18);
    console.log(adults);
6. filtering ages array that dont contain age 30.
#   const ages = [5, 23, 14, 30, 21];
    console.log(ages);
    const adults = ages.filter((age) => age !== 30);
    console.log(adults);

# ------------------------------ SPREAD OPERATOR ----------------------------- #
1. combining two or more array with the old way using concat method.
#   const arr1 = [1, 2, 3];
    const arr2 = [4, 5, 6];
    const arr3 = [7, 8, 9];
    const numbers = arr1.concat(arr3, arr2);
    console.log(numbers);
2. combining two or more array with modern javascript using spread operator.
#   const arr1 = [1, 2, 3];
    const arr2 = [4, 5, 6];
    const arr3 = [7, 8, 9];
    const numbers = [0, ...arr1, ...arr2, 8, 99, ...arr3];
    console.log(numbers);
3. we can also use spread operator in objects.
#   const obj1 = {
        name : "raghul",
    };
    const obj2 = {
        hobby : ["reading", "cricket"],
    }
    const user = {...obj1, ...obj2, nickName : "snipcot"};
    console.log(user);

# ---------------------- TERNARY / CONDITIONAL OPERATOR ---------------------- #
1. it is used for adding conditions.
2. ternary operators are the shortcut way to write if-else condition.
#   codition ? trueExpression : falseExpression
#   const marks = 50;
    const result = marks > 35 ? "pass" : "fail";
    console.log(result);

# -------------------- MODULES / COMPONENTS IN JAVASCRIPT -------------------- #
1. module is a file that contains code to perform specific task.
2. it can contain variables, objects, functions, etc.
3. dividing our code into multiple parts is called modules.
4. export keyword is used to make a module public so that other modules can use that.
#   export function boo(){...}
5. developers call modules as components.
6. import keyword is used to link a module into our current module.
#   import {boo} from "./location";

# ----------------------------- EXPORT AS DEFAULT ---------------------------- #
1. there is some difference between export vs export default.
#   export default function boo(){...}
2. in importing the  export default functions there is no need of curlybraces {}.
#   import boo from "./location";
3. if we have one default export and some export function in a component.
#   import boo,{func1, func2} from "./location";
4. it is a good practise to have export declaration at the end of every component code.
#   export default boo;
    export {function_name}